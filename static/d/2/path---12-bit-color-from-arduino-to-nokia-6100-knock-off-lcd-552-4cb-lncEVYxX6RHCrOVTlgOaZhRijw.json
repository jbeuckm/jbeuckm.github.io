{"data":{"markdownRemark":{"html":"<p>This code draws a Mandelbrot pattern on the 132x132 Nokia 6100 type screen with Epson controller (will not work for the Phillips) from an <a href=\"http://arduino.cc\">Arduino</a>. I started with the code example from <a href=\"http://www.arduino.cc/cgi-bin/yabb2/YaBB.pl?num=1237036119/45\">this post</a> and made some optimizations- especially to the serial communication code. Then I ported the Mandelbrot algorithm from <a href=\"http://www.codeproject.com/KB/cpp/mandelbrot_obfuscation.aspx\">here</a>. The zoom level and viewport into the fractal can easily be changed or made to update each loop. But it's slow.</p>\n<p><img src=\"/pinecar-092441550d5e5ed09d30dd2ded2d2d21.jpg\" alt=\"World&#x27;s first 8Mhz pinewood derby car with 12-bit color?\"></p>\n<p><a href=\"/mandelbrot_zoomer-de659a35c90c05a3c09263f5e6713dcb.pde\">source</a></p>\n<p>To send serial data a bit faster, one might reserve an entire Arduino port and rotate/clock, rotate/clock and so on, instead of repeatedly testing the data byte and flipping a single pin. I still haven't been able to engage the 8-bit color mode, which would again speed things up since I could send one byte per pixel instead of three bytes for two pixels. I used an 8Mhz and would only use 16Mhz or higher setup if I did this again. When will there be a 2Ghz Arduino? Then it might look more like this:</p>\n<p>(needs flash)</p>\n<p><object type=\"application/x-shockwave-flash\"\n  data=\"your-flash-file.swf\"\n  width=\"132\" height=\"132\"></p>\n  <param name=\"movie\" value=\"/mandelbrotset.swf\" />\n  <param name=\"quality\" value=\"high\"/>\n</object>\n<p>(mouse left/right for pan, up/down for zoom)</p>","frontmatter":{"path":"/12_bit_color_from_arduino_to_nokia_6100_knock_off_lcd","title":"12-bit Color from Arduino to Nokia 6100 Knock-off LCD","date":"2009-09-21","tags":["arduino","artwork","electronics","fractal"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false}}