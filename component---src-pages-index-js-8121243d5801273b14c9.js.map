{"version":3,"sources":["webpack:///./src/hexagons/components/Torus/BaseScene.js","webpack:///./src/hexagons/components/Torus/utils.ts","webpack:///./src/hexagons/components/Torus/index.js","webpack:///./src/hexagons/components/Motion.js","webpack:///./src/hexagons/App.js","webpack:///./src/pages/index.js","webpack:///./src/lib/ForceDirectedGraph/Point2D.ts","webpack:///./src/hexagons/clients/blog.js","webpack:///./src/lib/ForceDirectedGraph/distance.ts","webpack:///./src/lib/hexGrid.ts"],"names":["CAMERA_SPEED_FRICTION","BaseScene","props","_this","_Component","call","this","onDocumentKeyDown","event","handler","keyHandler","code","animate","requestAnimationFrame","updateCameraPosition","renderer","render","scene","camera","cameraSpeedX","cameraSpeedY","cameraSpeedZ","cameraPosX","cameraPosY","cameraPosZ","position","set","onDocumentResize","_window","window","width","innerWidth","height","innerHeight","setSize","aspect","updateProjectionMatrix","canvasRef","createRef","raycaster","THREE","meshObjects","swipeHandler","componentDidMount","document","body","style","overflow","_window2","canvas","current","far","addEventListener","Hammer","require","hammer","domElement","get","direction","DIRECTION_ALL","on","tapHandler","bind","_event$center","center","eventX","x","eventY","y","mouse","clientWidth","clientHeight","setFromCamera","intersects","intersectObjects","group","children","length","handleObjectTapped","object","react_default","a","createElement","id","zIndex","ref","Component","R","r","unitHexagon","points","angle","Math","PI","vertex","cos","sin","push","getUnitHexagon2d","projectOntoTorus","theta","phi","major","getHexagonGeometry","positionTheta","positionPhi","sizeTheta","sizePhi","geom","vertices","uvs","forEach","i","face","faces","faceVertexUvs","meshForGeometryAndImage","geometry","imageUrl","texture","load","anisotropy","capabilities","getMaxAnisotropy","material","map","TWO_PI","PHI_THROTTLE_DELTA","THETA_THROTTLE_DELTA","THETA_POSITIONS","PHI_POSITIONS","THETA_INTERVAL","PHI_INTERVAL","Torus","_BaseScene","speedTheta","overallVelocityX","speedPhi","overallVelocityY","handlePosts","items","thetaSize","phiSize","item","index","mesh","image","link","thetaGroup","add","setupTorus","hexagonCoordMatrix","buildPositionMatrix","z","phiGroup","blogClient","Post","list","then","response","layout","data","console","log","initialTheta","initialPhi","_ref","location","href","rotation","ArrowRight","ArrowLeft","ArrowUp","ArrowDown","Space","prototype","angleDiff","destinationAngle","sourceAngle","distance","Motion","onChangeOrientation","inheritsLoose_default","_proto","handleOrientation","undefined","offsetBeta","beta","offsetGamma","gamma","checkDeviceEvents","_this2","self","DeviceOrientationEvent","requestPermission","permissionState","catch","error","type","onClick","App","torusRef","useEffect","screen","orientation","lock","e","components_Torus","Motion_Motion","magBeta","abs","MOVE_THRESHOLD","dirBeta","magGamma","dirGamma","marginTop","margin","color","__webpack_exports__","Helmet","rel","sizes","hexagons_App","Point2D","point","scale","factor","mappersmith__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","mappersmith__WEBPACK_IMPORTED_MODULE_0___default","n","mappersmith_middleware_encode_json__WEBPACK_IMPORTED_MODULE_1__","mappersmith_middleware_encode_json__WEBPACK_IMPORTED_MODULE_1___default","forge","clientId","host","middleware","EncodeJson","resources","path","random","d","distance2D","distance1D","x1","x2","EXTENT","basicDistance","mirrorDistance","p1","p2","dX","dY","magnitude","sqrt","_THETA_DIVISIONS","layer","positionMatrix","row","Array","thetaOffset","col","assignItemsToNearestAddress","areaSize","addressCoordMatrix","placements","empties","j","buildEmptyPlacements","minDistance","Number","MAX_SAFE_INTEGER","closestHexagon","closestAddress","rowArray","coords"],"mappings":"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","file":"component---src-pages-index-js-8121243d5801273b14c9.js","sourcesContent":["import React, { createRef, Component } from \"react\"\nimport * as THREE from \"three\"\n\nconst CAMERA_SPEED_FRICTION = 0.08\n\nclass BaseScene extends Component {\n  constructor(props) {\n    super(props)\n    this.canvasRef = createRef()\n\n    this.cameraPosX = 0\n    this.cameraPosY = 0\n    this.cameraPosZ = 10\n    this.cameraSpeedX = 0\n    this.cameraSpeedY = 0\n    this.cameraSpeedZ = 0\n\n    this.raycaster = new THREE.Raycaster()\n\n    this.position = 0\n\n    this.meshObjects = []\n    this.keyHandler = {}\n    this.swipeHandler = () => {}\n  }\n\n  componentDidMount() {\n    document.body.style.overflow = \"hidden\"\n\n    const { innerWidth: width, innerHeight: height } = window\n\n    // Add canvas\n    this.renderer = new THREE.WebGLRenderer({ canvas: this.canvasRef.current })\n    // document.body.appendChild(this.renderer.domElement)\n\n    this.scene = new THREE.Scene()\n\n    this.renderer.setSize(width, height)\n\n    let fov = 60\n    let near = 1\n    this.far = 10\n\n    // Set up camera and scene\n    this.camera = new THREE.PerspectiveCamera(\n      fov,\n      width / height,\n      near,\n      this.far\n    )\n\n    window.addEventListener(\"resize\", this.onDocumentResize)\n    document.addEventListener(\"keydown\", this.onDocumentKeyDown)\n\n    const Hammer = require(\"hammerjs\")\n\n    var hammer = new Hammer(this.renderer.domElement)\n    hammer.get(\"swipe\").set({ direction: Hammer.DIRECTION_ALL })\n    hammer.on(\"swipe\", this.swipeHandler)\n    hammer.on(\"tap\", this.tapHandler.bind(this))\n  }\n\n  onDocumentKeyDown = event => {\n    const handler = this.keyHandler[event.code]\n    handler && handler(event)\n  }\n\n  tapHandler(event) {\n    const { x: eventX, y: eventY } = event.center\n\n    var mouse = new THREE.Vector2()\n    mouse.x = (eventX / this.renderer.domElement.clientWidth) * 2 - 1\n    mouse.y = -(eventY / this.renderer.domElement.clientHeight) * 2 + 1\n\n    this.raycaster.setFromCamera(mouse, this.camera)\n\n    var intersects = this.raycaster.intersectObjects(this.group.children)\n\n    if (intersects.length > 0) {\n      this.handleObjectTapped(intersects[0].object)\n      return true\n    }\n  }\n\n  animate = () => {\n    requestAnimationFrame(this.animate)\n\n    this.updateCameraPosition()\n\n    this.renderer.render(this.scene, this.camera)\n  }\n\n  updateCameraPosition = () => {\n    this.cameraSpeedX *= 1.0 - CAMERA_SPEED_FRICTION\n    this.cameraSpeedY *= 1.0 - CAMERA_SPEED_FRICTION\n    this.cameraSpeedZ *= 1.0 - CAMERA_SPEED_FRICTION\n\n    this.cameraPosX += this.cameraSpeedX\n    this.cameraPosY += this.cameraSpeedY\n    this.cameraPosZ += this.cameraSpeedZ\n\n    this.camera.position.set(this.cameraPosX, this.cameraPosY, this.cameraPosZ)\n  }\n\n  onDocumentResize = () => {\n    const { innerWidth: width, innerHeight: height } = window\n\n    this.renderer.setSize(width, height)\n    this.camera.aspect = width / height\n    this.camera.updateProjectionMatrix()\n  }\n\n  render() {\n    return (\n      <div id=\"holder\" style={{ position: \"relative\" }}>\n        <canvas\n          style={{ position: \"absolute\", zIndex: 1 }}\n          ref={this.canvasRef}\n        />\n      </div>\n    )\n  }\n}\n\nexport default BaseScene\n","import * as THREE from \"three\"\nimport { Vector2, Vector3, Mesh, Geometry, Renderer } from \"./three.d\"\nimport { Item, Point2D } from \"../../../lib/ForceDirectedGraph\"\n\nlet R = 10\nlet r = 3\n\nexport const setTorusDimensions = (_R: number, _r: number): void => {\n  R = _R\n  r = _r\n}\n\nexport const getUnitHexagon2d = (): Vector2[] => {\n  const points = []\n  for (let angle = 0; angle < 2 * Math.PI; angle += Math.PI / 3) {\n    const vertex = new THREE.Vector2(Math.cos(angle), Math.sin(angle))\n    points.push(vertex)\n  }\n  return points\n}\n\nconst unitHexagon = getUnitHexagon2d()\n\nexport const projectOntoTorus = (theta: number, phi: number): Vector3 => {\n  const major = R + r * Math.cos(phi)\n  return new THREE.Vector3(\n    major * Math.cos(theta),\n    r * Math.sin(phi),\n    major * Math.sin(theta)\n  )\n}\n\nexport const getHexagonGeometry = (\n  positionTheta: number,\n  positionPhi: number,\n  sizeTheta: number,\n  sizePhi: number\n): Geometry => {\n  const geom = new THREE.Geometry()\n\n  geom.vertices.push(projectOntoTorus(positionTheta, positionPhi))\n\n  const uvs = [new THREE.Vector2(0.5, 0.5)]\n\n  unitHexagon.forEach(vertex => {\n    geom.vertices.push(\n      projectOntoTorus(\n        positionTheta + sizeTheta * vertex.x,\n        positionPhi + sizePhi * vertex.y\n      )\n    )\n    uvs.push(new THREE.Vector2(0.5 - 0.5 * vertex.x, 0.5 - 0.5 * vertex.y))\n  })\n\n  for (let i = 1; i <= 6; i++) {\n    const face = new THREE.Face3(0, i, i + 1)\n    geom.faces.push(face)\n    geom.faceVertexUvs[0].push([uvs[0], uvs[i], uvs[i + 1]])\n  }\n\n  return geom\n}\n\nconst hexagonGeometry = getHexagonGeometry()\n\nexport const hexagonMeshForImage = (\n  imageUrl: string,\n  renderer: Renderer\n): Mesh => {\n  var texture = new THREE.TextureLoader().load(imageUrl)\n  texture.anisotropy = renderer.getMaxAnisotropy()\n\n  var material = new THREE.MeshBasicMaterial({\n    map: texture,\n  })\n\n  return new THREE.Mesh(hexagonGeometry, material)\n}\n\nexport const meshForGeometryAndImage = (\n  geometry: Geometry,\n  imageUrl: string,\n  renderer: Renderer\n): Mesh => {\n  var texture = new THREE.TextureLoader().load(imageUrl)\n  texture.anisotropy = renderer.capabilities.getMaxAnisotropy()\n\n  var material = new THREE.MeshBasicMaterial({\n    map: texture,\n  })\n\n  return new THREE.Mesh(geometry, material)\n}\n\nexport const projectVectorOntoTorus = (vec: Point2D): Vector3 => {\n  const major = R + r * Math.cos(vec.y)\n  return new THREE.Vector3(\n    major * Math.cos(vec.x),\n    r * Math.sin(vec.y),\n    major * Math.sin(vec.x)\n  )\n}\n","import BaseScene from \"./BaseScene\"\nimport * as THREE from \"three\"\nimport { buildPositionMatrix } from \"../../../lib/hexGrid\"\nimport blogClient from \"../../clients/blog\"\nimport {\n  setTorusDimensions,\n  getHexagonGeometry,\n  meshForGeometryAndImage,\n} from \"./utils\"\n\nconst TWO_PI = 2 * Math.PI\nconst R = 20\nconst r = 4\nconst CAMERA_SPEED_FRICTION = 0.05\nconst PHI_THROTTLE_DELTA = 0.01\nconst THETA_THROTTLE_DELTA = 0.005\n\nconst THETA_POSITIONS = 50\nconst THETA_DIVISIONS = 3 * THETA_POSITIONS\nconst PHI_POSITIONS = 40 // even\n\nconst THETA_INTERVAL = TWO_PI / THETA_DIVISIONS\nconst PHI_INTERVAL = TWO_PI / PHI_POSITIONS\n\nsetTorusDimensions(R, r)\n\nclass Torus extends BaseScene {\n  constructor() {\n    super()\n\n    this.thetaGroup = new THREE.Group()\n    this.group = this.thetaGroup\n    this.phiGroup = new THREE.Group()\n\n    this.cameraPosZ = 0\n\n    this.positionTheta = 4.28\n    this.positionPhi = 34.7\n\n    this.speedTheta = 0.005\n    this.speedPhi = 0\n\n    this.keyHandler = {\n      ArrowRight: () => (this.speedTheta -= THETA_THROTTLE_DELTA),\n      ArrowLeft: () => (this.speedTheta += THETA_THROTTLE_DELTA),\n      ArrowUp: () => (this.speedPhi -= PHI_THROTTLE_DELTA),\n      ArrowDown: () => (this.speedPhi += PHI_THROTTLE_DELTA),\n      Space: () => console.log(this.positionTheta, this.positionPhi),\n    }\n  }\n\n  swipeHandler = event => {\n    this.speedTheta += 0.01 * event.overallVelocityX\n    this.speedPhi -= 0.01 * event.overallVelocityY\n  }\n\n  handlePosts = items => {\n    const thetaSize = 0.97 * THETA_INTERVAL\n    const phiSize = (0.97 * PHI_INTERVAL) / Math.sin(Math.PI / 3)\n\n    items.forEach((item, index) => {\n      const mesh = meshForGeometryAndImage(\n        getHexagonGeometry(\n          item.position.x,\n          item.position.y,\n          thetaSize,\n          phiSize\n        ),\n        item.image,\n        this.renderer\n      )\n\n      mesh.link = item.link\n      this.thetaGroup.add(mesh)\n    })\n  }\n\n  setupTorus = () => {\n    this.hexagonCoordMatrix = buildPositionMatrix(\n      THETA_POSITIONS,\n      PHI_POSITIONS\n    )\n\n    this.thetaGroup.position.z = -0.95 * R\n\n    this.phiGroup.add(this.thetaGroup)\n\n    this.scene.add(this.phiGroup)\n\n    blogClient.Post.list().then(response => {\n      const layout = response.data().layout\n      console.log({ layout })\n      if (layout.initialTheta) this.positionTheta = layout.initialTheta\n      if (layout.initialPhi) this.positionPhi = layout.initialPhi\n\n      const items = response.data().items\n      this.handlePosts(items)\n    })\n\n    this.animate()\n  }\n\n  handleObjectTapped = ({ link }) => {\n    document.location.href = link\n  }\n\n  updateCameraPosition = () => {\n    this.speedTheta *= 1.0 - CAMERA_SPEED_FRICTION\n    this.speedPhi *= 1.0 - CAMERA_SPEED_FRICTION\n\n    this.positionPhi += this.speedPhi\n    this.positionTheta += this.speedTheta\n\n    this.thetaGroup.rotation.y = this.positionTheta\n    this.phiGroup.rotation.x = this.positionPhi\n  }\n\n  componentDidMount() {\n    super.componentDidMount()\n\n    this.camera.position.set(this.cameraPosX, this.cameraPosY, this.cameraPosZ)\n\n    this.setupTorus()\n  }\n}\n\nexport default Torus\n","import React, { Component } from \"react\"\n\nconst angleDiff = (destinationAngle, sourceAngle) => {\n  const distance = destinationAngle - sourceAngle\n\n  if (distance < -180) return distance + 360\n\n  if (distance > 179) return distance - 360\n\n  return distance\n}\n\nexport class Motion extends Component {\n  constructor(props) {\n    super(props)\n\n    this.onChangeOrientation = props.onChangeOrientation\n  }\n\n  handleOrientation(event) {\n    if (this.offsetBeta === undefined) {\n      console.log(\n        \"und\",\n        this.offsetBeta,\n        event.beta,\n        this.offsetGamma,\n        event.gamma\n      )\n      this.offsetBeta = event.beta\n      this.offsetGamma = event.gamma\n    } else {\n      console.log(\"set\", this.offsetBeta, this.offsetGamma)\n      this.onChangeOrientation({\n        beta: angleDiff(event.beta, this.offsetBeta),\n        gamma: angleDiff(event.gamma, this.offsetGamma),\n      })\n\n      this.offsetBeta = 0.99 * this.offsetBeta + 0.01 * event.beta\n      this.offsetGamma = 0.99 * this.offsetGamma + 0.01 * event.gamma\n    }\n  }\n\n  checkDeviceEvents() {\n    const self = this\n    if (typeof DeviceOrientationEvent.requestPermission === \"function\") {\n      DeviceOrientationEvent.requestPermission()\n        .then(permissionState => {\n          if (permissionState === \"granted\") {\n            window.addEventListener(\n              \"deviceorientation\",\n              self.handleOrientation.bind(this),\n              true\n            )\n          }\n        })\n        .catch(console.error)\n    } else {\n      //window.addEventListener(\"deviceorientation\", handleOrientation, true)\n    }\n  }\n\n  render() {\n    return (\n      <div style={{ position: \"absolute\", zIndex: 1000 }}>\n        <button type=\"button\" onClick={this.checkDeviceEvents.bind(this)}>\n          track\n        </button>\n      </div>\n    )\n  }\n}\n","import React, { createRef, useEffect } from \"react\"\n\nimport Torus from \"./components/Torus\"\nimport { Motion } from \"./components/Motion\"\n\nconst MOVE_THRESHOLD = 15\n\nconst App = () => {\n  const torusRef = createRef()\n\n  useEffect(() => {\n    try {\n      window.screen.orientation.lock(\"portrait-primary\")\n    } catch (e) {\n      console.log(e)\n    }\n  }, [])\n\n  return (\n    <div style={{ position: \"relative\" }}>\n      <Torus ref={torusRef} />\n      <Motion\n        onChangeOrientation={({ gamma, beta }) => {\n          if (torusRef.current) {\n            const magBeta = Math.abs(beta)\n            if (magBeta > MOVE_THRESHOLD / 2) {\n              const dirBeta = beta >= 0 ? 1 : -1\n              torusRef.current.speedPhi = dirBeta * -0.003 * magBeta\n            }\n\n            const magGamma = Math.abs(gamma)\n            if (magGamma > MOVE_THRESHOLD) {\n              const dirGamma = gamma >= 0 ? 1 : -1\n              torusRef.current.speedTheta = dirGamma * 0.0007 * magGamma\n            }\n          }\n        }}\n      />\n      <div style={{ marginTop: 30, position: \"absolute\" }}>\n        <div style={{ margin: 2, color: \"#fff\" }}>\n          theta{torusRef.current ? torusRef.current.speedTheta : \"?\"}\n        </div>\n        <div style={{ margin: 2, color: \"#fff\" }}>\n          phi{torusRef.current ? torusRef.current.speedPhi : \"?\"}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default App\n","import React from \"react\"\nimport TorusTiledWithHexagonImages from \"../hexagons/App\"\nimport { Helmet } from \"react-helmet\"\nimport \"../hexagons/index.css\"\n\nexport default () => (\n  <div>\n    <Helmet>\n      <title>Joe's Web Page</title>\n      <link rel=\"apple-touch-icon\" href=\"/homescreen_icon.png\" />\n      <link rel=\"icon\" sizes=\"192x192\" href=\"/android_icon.png\" />\n    </Helmet>\n\n    <TorusTiledWithHexagonImages />\n  </div>\n)\n","class Point2D {\n  public x: number\n  public y: number\n\n  constructor(x: number, y: number) {\n    this.x = x\n    this.y = y\n  }\n\n  public add(point: Point2D): Point2D {\n    this.x += point.x\n    this.y += point.y\n\n    return this\n  }\n\n  public scale(factor: number): Point2D {\n    this.x *= factor\n    this.y *= factor\n\n    return this\n  }\n}\n\nexport default Point2D\n","import forge from \"mappersmith\"\nimport EncodeJson from \"mappersmith/middleware/encode-json\"\n\nexport default forge({\n  clientId: \"joes-blog\",\n  host: \"\",\n  middleware: [EncodeJson],\n  resources: {\n    Post: {\n      list: { path: \"/feed-1.json?z=\" + Math.random() }, // process.env.POSTS_ENDPOINT\n    },\n  },\n})\n","import { Distance2D } from \"./types.d\"\nimport Point2D from \"./Point2D\"\n\nexport const distance1D = (x1: number, x2: number, EXTENT: number): number => {\n  if (x1 == x2) {\n    return 0\n  }\n  const basicDistance = x2 - x1\n  if (x1 < x2) {\n    const mirrorDistance = x1 + EXTENT - x2\n\n    if (basicDistance < mirrorDistance) {\n      return basicDistance\n    }\n    return -mirrorDistance\n  } else {\n    const mirrorDistance = x2 + EXTENT - x1\n\n    if (-basicDistance < mirrorDistance) {\n      return basicDistance\n    }\n    return mirrorDistance\n  }\n}\n\nexport const distance2D = (\n  p1: Point2D,\n  p2: Point2D,\n  EXTENT: Point2D\n): Distance2D => {\n  const dX = distance1D(p1.x, p2.x, EXTENT.x)\n  const dY = distance1D(p1.y, p2.y, EXTENT.y)\n  const magnitude = Math.sqrt(dX * dX + dY * dY)\n\n  return {\n    magnitude,\n    direction: { x: dX / magnitude, y: dY / magnitude },\n  }\n}\n","import { distance2D } from \"./ForceDirectedGraph/distance\"\nimport { uniq } from \"ramda\"\nimport Point2D from \"./ForceDirectedGraph/Point2D\"\nimport { Address, Distance2D } from \"./ForceDirectedGraph/types.d\"\n\nconst NEIGHBORS = [\n  { row: 1, col: 0 },\n  { row: 2, col: 0 },\n  { row: 1, col: -1 },\n  { row: -1, col: -1 },\n  { row: -2, col: 0 },\n  { row: -1, col: 0 },\n]\n\nexport const getNeighbor = (\n  col: number,\n  row: number,\n  neighborIndex: number,\n  THETA_POSITIONS: number,\n  PHI_POSITIONS: number\n): Address => {\n  const neighbor = NEIGHBORS[neighborIndex]\n\n  const newRow = row + neighbor.row\n  const newCol = col + neighbor.col\n\n  return {\n    row: newRow < 0 ? newRow + PHI_POSITIONS : newRow % PHI_POSITIONS,\n    col: newCol < 0 ? newCol + THETA_POSITIONS : newCol % THETA_POSITIONS,\n  }\n}\n\nexport const buildPositionMatrix = (\n  THETA_POSITIONS: number,\n  PHI_POSITIONS: number\n): Point2D[][] => {\n  const _THETA_DIVISIONS = 3 * THETA_POSITIONS\n\n  const THETA_INTERVAL = (2 * Math.PI) / _THETA_DIVISIONS\n  const PHI_INTERVAL = (2 * Math.PI) / PHI_POSITIONS\n\n  let layer = 0\n  const positionMatrix = []\n\n  for (let row = 0; row < PHI_POSITIONS; row++) {\n    positionMatrix[row] = Array(THETA_POSITIONS)\n\n    const thetaOffset = layer % 2 === 1 ? 1.5 * THETA_INTERVAL : 0\n\n    for (let col = 0; col < THETA_POSITIONS; col++) {\n      positionMatrix[row][col] = new Point2D(\n        thetaOffset + 3 * col * THETA_INTERVAL,\n        row * PHI_INTERVAL\n      )\n    }\n\n    layer++\n  }\n\n  return positionMatrix\n}\n/*\nexport const buildDistanceMatrix = (\n  positionMatrix: object[][],\n  COL_COUNT,\n  ROW_COUNT,\n  extents = { x: 2 * Math.PI, y: 2 * Math.PI }\n): Distance2D[][][][] => {\n  const distances = Array(ROW_COUNT)\n\n  for (let i = 0; i < ROW_COUNT; i++) {\n    distances[i] = Array(COL_COUNT)\n    for (let j = 0; j < COL_COUNT; j++) {\n      distances[i][j] = Array(ROW_COUNT)\n      for (let k = 0; k < ROW_COUNT; k++) {\n        distances[i][j][k] = Array(COL_COUNT)\n        for (let l = 0; l < COL_COUNT; l++) {\n          distances[i][j][k][l] = distance2D(\n            positionMatrix[i][j],\n            positionMatrix[k][l],\n            extents\n          )\n        }\n      }\n    }\n  }\n\n  return distances\n}\n*/\n\nexport const buildEmptyPlacements = (\n  THETA_POSITIONS: number,\n  PHI_POSITIONS: number\n): object[][] => {\n  const empties = []\n\n  for (let i = 0; i < PHI_POSITIONS; i++) {\n    empties[i] = Array(THETA_POSITIONS)\n    for (let j = 0; j < THETA_POSITIONS; j++) {\n      empties[i][j] = null\n    }\n  }\n\n  return empties\n}\n\nconst getPrecomputedDistance = (\n  c1: Address,\n  c2: Address,\n  distanceMatrix: Distance2D[][][][]\n): Distance2D => distanceMatrix[c1.row][c1.col][c2.row][c2.col]\n\nexport const assignItemsToNearestAddress = (\n  items,\n  areaSize,\n  addressCoordMatrix,\n  THETA_POSITIONS,\n  PHI_POSITIONS\n) => {\n  const placements = buildEmptyPlacements(THETA_POSITIONS, PHI_POSITIONS)\n\n  items.forEach(item => {\n    const { position } = item\n\n    let minDistance = { magnitude: Number.MAX_SAFE_INTEGER }\n    let closestHexagon = null,\n      closestAddress = null\n\n    addressCoordMatrix.forEach((rowArray, row) => {\n      rowArray.forEach((coords, col) => {\n        if (!placements[row][col]) {\n          const distance = distance2D(position, coords, areaSize)\n\n          if (distance.magnitude < minDistance.magnitude) {\n            minDistance = distance\n            closestHexagon = coords\n            closestAddress = { row, col }\n          }\n        }\n      })\n    })\n\n    if (closestHexagon) {\n      item.position = new Point2D(closestHexagon.x, closestHexagon.y)\n      placements[closestAddress.row][closestAddress.col] = item\n    }\n  })\n}\n"],"sourceRoot":""}