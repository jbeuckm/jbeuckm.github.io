{"version":3,"sources":["webpack:///./src/hexagons/components/Torus/BaseScene.js","webpack:///./src/hexagons/components/Torus/utils.js","webpack:///./src/hexagons/clients/blog.js","webpack:///./src/hexagons/components/Torus/index.js","webpack:///./src/hexagons/App.js","webpack:///./src/pages/index.js"],"names":["CAMERA_SPEED_FRICTION","BaseScene","props","_this","_Component","call","this","tapHandler","event","console","log","onDocumentKeyDown","handler","keyHandler","code","onDocumentResize","_window","window","width","innerWidth","height","innerHeight","renderer","setSize","camera","aspect","updateProjectionMatrix","onDocumentMouseDown","preventDefault","mouse","THREE","x","clientX","domElement","clientWidth","y","clientY","clientHeight","raycaster","setFromCamera","intersects","intersectObjects","group","children","length","postId","object","animate","requestAnimationFrame","updateCameraPosition","render","scene","cameraSpeedX","cameraSpeedY","cameraSpeedZ","cameraPosX","cameraPosY","cameraPosZ","position","set","meshObjects","swipeHandler","componentDidMount","_window2","document","body","appendChild","far","addEventListener","Hammer","require","manager","Manager","Swipe","add","on","hammer","Component","unitHexagon","points","angle","Math","PI","vertex","cos","sin","push","getUnitHexagon2d","projectOntoTorus","theta","phi","major","R","r","getHexagonGeometry","positionTheta","positionPhi","sizeTheta","sizePhi","geom","vertices","uvs","forEach","i","face","faces","faceVertexUvs","meshForGeometryAndImage","geometry","imageUrl","texture","load","anisotropy","capabilities","getMaxAnisotropy","material","map","forge","clientId","host","middleware","EncodeJson","resources","Post","list","path","random","THETA_THROTTLE_DELTA","phiSplit","thetaInterval","phiInterval","Torus","_BaseScene","speedTheta","overallVelocityX","handlePosts","items","thumbnails","flatten","_ref","link","images","image","thetaSize","getThetaSize","phiSize","getPhiSize","thumbnail","index","url","coords","hexagonCoords","mesh","thetaGroup","setupTorus","j","l","line","depthTest","opacity","transparent","layer","thetaOffset","hexagon","hexagonLine","blogClient","then","response","data","z","phiGroup","location","href","speedPhi","rotation","baseSpeedPhi","baseSpeedTheta","ArrowRight","ArrowLeft","prototype","App","react_default","a","createElement","components_Torus","__webpack_exports__","Helmet","rel","src_hexagons_App"],"mappings":"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","file":"component---src-pages-index-js-edc2d3fb2d618d4de52d.js","sourcesContent":["import { Component } from \"react\"\nimport * as THREE from \"three\"\n\nconst CAMERA_SPEED_FRICTION = 0.08\n\nclass BaseScene extends Component {\n  constructor(props) {\n    super(props)\n\n    this.cameraPosX = 0\n    this.cameraPosY = 0\n    this.cameraPosZ = 10\n    this.cameraSpeedX = 0\n    this.cameraSpeedY = 0\n    this.cameraSpeedZ = 0\n\n    this.raycaster = new THREE.Raycaster()\n\n    this.position = 0\n\n    this.meshObjects = []\n    this.keyHandler = {}\n    this.swipeHandler = () => {}\n  }\n\n  componentDidMount() {\n    const { innerWidth: width, innerHeight: height } = window\n\n    // Add canvas\n    this.renderer = new THREE.WebGLRenderer()\n    document.body.appendChild(this.renderer.domElement)\n\n    this.scene = new THREE.Scene()\n\n    this.renderer.setSize(width, height)\n\n    let fov = 60\n    let near = 1\n    this.far = 10\n\n    // Set up camera and scene\n    this.camera = new THREE.PerspectiveCamera(\n      fov,\n      width / height,\n      near,\n      this.far\n    )\n\n    window.addEventListener(\"resize\", this.onDocumentResize)\n    document.addEventListener(\"mousedown\", this.onDocumentMouseDown, false)\n    document.addEventListener(\"keydown\", this.onDocumentKeyDown)\n\n    const Hammer = require(\"hammerjs\")\n\n    var manager = new Hammer.Manager(this.renderer.domElement)\n    var Swipe = new Hammer.Swipe()\n    manager.add(Swipe)\n\n    manager.on(\"swipe\", this.swipeHandler)\n\n    var hammer = new Hammer(this.renderer.domElement)\n    hammer.on(\"swipe\", this.swipeHandler)\n    hammer.on(\"tap\", this.tapHandler)\n  }\n\n  tapHandler = event => {\n    console.log(\"tap\", { event })\n  }\n\n  onDocumentKeyDown = event => {\n    const handler = this.keyHandler[event.code]\n    handler && handler(event)\n  }\n\n  onDocumentResize = () => {\n    const { innerWidth: width, innerHeight: height } = window\n\n    this.renderer.setSize(width, height)\n    this.camera.aspect = width / height\n    this.camera.updateProjectionMatrix()\n  }\n\n  onDocumentMouseDown = event => {\n    event.preventDefault()\n\n    var mouse = new THREE.Vector2()\n    mouse.x = (event.clientX / this.renderer.domElement.clientWidth) * 2 - 1\n    mouse.y = -(event.clientY / this.renderer.domElement.clientHeight) * 2 + 1\n\n    this.raycaster.setFromCamera(mouse, this.camera)\n\n    var intersects = this.raycaster.intersectObjects(this.group.children)\n\n    if (intersects.length > 0) {\n      const { postId } = intersects[0].object\n      console.log({ postId })\n    }\n  }\n\n  animate = () => {\n    requestAnimationFrame(this.animate)\n\n    this.updateCameraPosition()\n\n    this.renderer.render(this.scene, this.camera)\n  }\n\n  updateCameraPosition = () => {\n    this.cameraSpeedX *= 1.0 - CAMERA_SPEED_FRICTION\n    this.cameraSpeedY *= 1.0 - CAMERA_SPEED_FRICTION\n    this.cameraSpeedZ *= 1.0 - CAMERA_SPEED_FRICTION\n\n    this.cameraPosX += this.cameraSpeedX\n    this.cameraPosY += this.cameraSpeedY\n    this.cameraPosZ += this.cameraSpeedZ\n\n    this.camera.position.set(this.cameraPosX, this.cameraPosY, this.cameraPosZ)\n  }\n\n  render() {\n    return null\n  }\n}\n\nexport default BaseScene\n","import * as THREE from \"three\"\n\nexport const getUnitHexagon2d = () => {\n  const points = []\n  for (let angle = 0; angle < 2 * Math.PI; angle += Math.PI / 3) {\n    const vertex = new THREE.Vector2(Math.cos(angle), Math.sin(angle))\n    points.push(vertex)\n  }\n  return points\n}\n\nconst unitHexagon = getUnitHexagon2d()\n\nexport const projectOntoTorus = (theta, phi) => {\n  const major = R + r * Math.cos(phi)\n  return new THREE.Vector3(\n    major * Math.cos(theta),\n    r * Math.sin(phi),\n    major * Math.sin(theta)\n  )\n}\n\nexport const getHexagonGeometry = (\n  positionTheta,\n  positionPhi,\n  sizeTheta,\n  sizePhi\n) => {\n  const geom = new THREE.Geometry()\n\n  geom.vertices.push(projectOntoTorus(positionTheta, positionPhi))\n\n  const uvs = [new THREE.Vector2(0.5, 0.5)]\n\n  unitHexagon.forEach(vertex => {\n    geom.vertices.push(\n      projectOntoTorus(\n        positionTheta + sizeTheta * vertex.x,\n        positionPhi + sizePhi * vertex.y\n      )\n    )\n    uvs.push(new THREE.Vector2(0.5 - 0.5 * vertex.x, 0.5 - 0.5 * vertex.y))\n  })\n\n  for (let i = 1; i <= 6; i++) {\n    const face = new THREE.Face3(0, i, i + 1)\n    geom.faces.push(face)\n    geom.faceVertexUvs[0].push([uvs[0], uvs[i], uvs[i + 1]])\n  }\n\n  return geom\n}\n\nconst hexagonGeometry = getHexagonGeometry()\n\nexport const hexagonMeshForImage = (imageUrl, renderer) => {\n  var texture = new THREE.TextureLoader().load(imageUrl)\n  texture.anisotropy = renderer.getMaxAnisotropy()\n\n  var material = new THREE.MeshBasicMaterial({\n    map: texture,\n  })\n\n  return new THREE.Mesh(hexagonGeometry, material)\n}\n\nexport const meshForGeometryAndImage = (geometry, imageUrl, renderer) => {\n  var texture = new THREE.TextureLoader().load(imageUrl)\n  texture.anisotropy = renderer.capabilities.getMaxAnisotropy()\n\n  var material = new THREE.MeshBasicMaterial({\n    map: texture,\n  })\n\n  return new THREE.Mesh(geometry, material)\n}\n\nexport const HALF_HEIGHT = Math.sin(Math.PI / 3)\n\nlet R = 10\nlet r = 3\n\nexport const setTorusDimensions = (_R, _r) => {\n  R = _R\n  r = _r\n}\n\nexport const projectVectorOntoTorus = vec => {\n  const major = R + r * Math.cos(vec.y)\n  return new THREE.Vector3(\n    major * Math.cos(vec.x),\n    r * Math.sin(vec.y),\n    major * Math.sin(vec.x)\n  )\n}\n","import forge from \"mappersmith\"\nimport EncodeJson from \"mappersmith/middleware/encode-json\"\n\nexport default forge({\n  clientId: \"joes-blog\",\n  host: \"\",\n  middleware: [EncodeJson],\n  resources: {\n    Post: {\n      list: { path: \"/feed-1.json?z=\" + Math.random() }, // process.env.POSTS_ENDPOINT\n    },\n  },\n})\n","import BaseScene from \"./BaseScene\"\nimport * as THREE from \"three\"\nimport {\n  setTorusDimensions,\n  projectOntoTorus,\n  getHexagonGeometry,\n  meshForGeometryAndImage,\n} from \"./utils\"\nimport blogClient from \"../../clients/blog\"\nimport { flatten } from \"ramda\"\n\nconst R = 20\nconst r = 4\nconst CAMERA_SPEED_FRICTION = 0.05\nconst PHI_THROTTLE_DELTA = 0.01\nconst THETA_THROTTLE_DELTA = 0.005\n\nconst thetaSplit = 210 // divisible by three seems nice\nconst phiSplit = 60 // even\n\nconst thetaInterval = (2 * Math.PI) / thetaSplit\nconst phiInterval = (2 * Math.PI) / phiSplit\n\nsetTorusDimensions(R, r)\n\nclass Torus extends BaseScene {\n  constructor() {\n    super()\n\n    this.thetaGroup = new THREE.Group()\n    this.phiGroup = new THREE.Group()\n    this.group = new THREE.Group()\n\n    this.cameraPosX = 0\n    this.cameraPosY = 0\n    this.cameraPosZ = 0\n\n    this.positionTheta = Math.PI\n    this.positionPhi = Math.PI + 0.1\n\n    this.speedTheta = 0.005\n    this.speedPhi = 0\n\n    this.baseSpeedPhi = 0.001\n    this.baseSpeedTheta = 0.0003\n\n    this.keyHandler = {\n      ArrowRight: () => {\n        this.baseSpeedTheta = -0.0003\n        this.speedTheta -= THETA_THROTTLE_DELTA\n      },\n      ArrowLeft: () => {\n        this.baseSpeedTheta = 0.0003\n        this.speedTheta += THETA_THROTTLE_DELTA\n      },\n\n      // ArrowUp: () => {\n      //   this.baseSpeedPhi = -0.001\n      //   this.speedPhi -= PHI_THROTTLE_DELTA\n      // },\n      // ArrowDown: () => {\n      //   this.baseSpeedPhi = 0.001\n      //   this.speedPhi += PHI_THROTTLE_DELTA\n      // },\n    }\n  }\n\n  swipeHandler = event => {\n    this.speedTheta += 0.01 * event.overallVelocityX\n  }\n\n  handlePosts = items => {\n    const thumbnails = flatten(\n      items.map(({ link, images }) =>\n        images.map(image => ({\n          link,\n          image: image,\n        }))\n      )\n    )\n\n    const thetaSize = this.getThetaSize()\n    const phiSize = this.getPhiSize()\n\n    thumbnails.forEach((thumbnail, index) => {\n      if (!thumbnail) return\n      const url = thumbnail.image\n      const coords = this.hexagonCoords[index]\n\n      const mesh = meshForGeometryAndImage(\n        getHexagonGeometry(coords.theta, coords.phi, thetaSize, phiSize),\n        url,\n        this.renderer\n      )\n      mesh.link = thumbnail.link\n      this.thetaGroup.add(mesh)\n    })\n  }\n\n  getThetaSize = () => {\n    return 0.97 * thetaInterval\n  }\n  getPhiSize = () => {\n    return (0.97 * phiInterval) / Math.sin(Math.PI / 3)\n  }\n\n  setupTorus = () => {\n    const vertices = []\n\n    for (let i = 0; i < 2 * Math.PI; i += thetaInterval) {\n      for (let j = 0; j < 2 * Math.PI; j += phiInterval) {\n        vertices.push(projectOntoTorus(i, j))\n      }\n    }\n\n    const geom = new THREE.Geometry()\n\n    vertices.forEach(vertex => {\n      geom.vertices.push(vertex)\n    })\n\n    const l = geom.vertices.length\n\n    for (let i = 0; i < l; i++) {\n      const face = new THREE.Face3(i, (i + phiSplit) % l, (i + 1) % l)\n      geom.faces.push(face)\n    }\n\n    var line = new THREE.LineSegments(new THREE.WireframeGeometry(geom))\n    line.material.depthTest = true\n    line.material.opacity = 1\n    line.material.transparent = true\n\n    const thetaSize = this.getThetaSize()\n    const phiSize = this.getPhiSize()\n\n    let layer = 0\n\n    this.hexagonCoords = []\n\n    for (let phi = 0; phi < 2 * Math.PI; phi += phiInterval) {\n      const thetaOffset = layer++ % 2 === 1 ? 1.5 * thetaInterval : 0\n\n      for (let theta = 0; theta < 2 * Math.PI; theta += 3 * thetaInterval) {\n        this.hexagonCoords.push({ theta: thetaOffset + theta, phi })\n        const hexagon = getHexagonGeometry(\n          thetaOffset + theta,\n          phi,\n          thetaSize,\n          phiSize\n        )\n        var hexagonLine = new THREE.LineSegments(\n          new THREE.WireframeGeometry(hexagon)\n        )\n        hexagonLine.material.depthTest = true\n        hexagonLine.material.opacity = 1\n        hexagonLine.material.transparent = true\n\n        //this.thetaGroup.add(hexagonLine)\n      }\n    }\n\n    blogClient.Post.list().then(response => {\n      const items = response.data().items\n      this.handlePosts(items)\n    })\n\n    this.thetaGroup.position.z = -0.95 * R\n\n    this.phiGroup.add(this.thetaGroup)\n\n    this.scene.add(this.phiGroup)\n\n    this.animate()\n  }\n\n  onDocumentMouseDown = event => {\n    event.preventDefault()\n\n    var mouse = new THREE.Vector2()\n    mouse.x = (event.clientX / this.renderer.domElement.clientWidth) * 2 - 1\n    mouse.y = -(event.clientY / this.renderer.domElement.clientHeight) * 2 + 1\n\n    this.raycaster.setFromCamera(mouse, this.camera)\n\n    var intersects = this.raycaster.intersectObjects(this.thetaGroup.children)\n\n    if (intersects.length > 0) {\n      const { link } = intersects[0].object\n      document.location.href = link\n    }\n  }\n\n  updateCameraPosition = () => {\n    this.speedTheta *= 1.0 - CAMERA_SPEED_FRICTION\n    this.speedPhi *= 1.0 - CAMERA_SPEED_FRICTION\n\n    //    this.positionPhi +=  this.speedPhi\n    this.positionTheta += this.speedTheta\n\n    this.thetaGroup.rotation.y = this.positionTheta\n    this.phiGroup.rotation.x = this.positionPhi\n  }\n\n  componentDidMount() {\n    super.componentDidMount()\n\n    this.camera.position.set(this.cameraPosX, this.cameraPosY, this.cameraPosZ)\n\n    this.setupTorus()\n  }\n}\n\nexport default Torus\n","import React, { Component } from \"react\"\nimport \"./App.css\"\n\nimport Torus from \"./components/Torus\"\n\nclass App extends Component {\n  render() {\n    return <Torus />\n  }\n}\n\nexport default App\n","import React from \"react\"\nimport TorusTiledWithHexagonImages from \"../hexagons/App\"\nimport { Helmet } from \"react-helmet\"\nimport \"../hexagons/index.css\"\n\nexport default () => (\n  <div>\n    <Helmet>\n      <title>Joes Web Page</title>\n      <link rel=\"apple-touch-icon\" href=\"/homescreen_icon.png\" />\n    </Helmet>\n\n    <TorusTiledWithHexagonImages />\n  </div>\n)\n"],"sourceRoot":""}