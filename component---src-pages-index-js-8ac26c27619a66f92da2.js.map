{"version":3,"sources":["webpack:///./src/hexagons/components/Torus/BaseScene.js","webpack:///./src/hexagons/components/Torus/utils.ts","webpack:///./src/hexagons/components/Torus/index.js","webpack:///./src/hexagons/App.js","webpack:///./src/pages/index.js","webpack:///./src/lib/ForceDirectedGraph/Point2D.ts","webpack:///./src/hexagons/clients/blog.js","webpack:///./src/lib/ForceDirectedGraph/distance.ts","webpack:///./src/lib/hexGrid.ts"],"names":["CAMERA_SPEED_FRICTION","BaseScene","props","_this","_Component","call","this","onDocumentKeyDown","event","handler","keyHandler","code","tapHandler","_event$center","center","eventX","x","eventY","y","mouse","THREE","renderer","domElement","clientWidth","clientHeight","raycaster","setFromCamera","camera","intersects","intersectObjects","group","children","length","handleObjectTapped","object","animate","requestAnimationFrame","updateCameraPosition","render","scene","cameraSpeedX","cameraSpeedY","cameraSpeedZ","cameraPosX","cameraPosY","cameraPosZ","position","set","onDocumentResize","_window","window","width","innerWidth","height","innerHeight","setSize","aspect","updateProjectionMatrix","meshObjects","swipeHandler","componentDidMount","document","body","style","overflow","_window2","appendChild","far","addEventListener","Hammer","require","hammer","get","direction","DIRECTION_ALL","on","Component","R","r","unitHexagon","points","angle","Math","PI","vertex","cos","sin","push","getUnitHexagon2d","projectOntoTorus","theta","phi","major","getHexagonGeometry","positionTheta","positionPhi","sizeTheta","sizePhi","geom","vertices","uvs","forEach","i","face","faces","faceVertexUvs","meshForGeometryAndImage","geometry","imageUrl","texture","load","anisotropy","capabilities","getMaxAnisotropy","material","map","TWO_PI","PHI_THROTTLE_DELTA","THETA_THROTTLE_DELTA","THETA_POSITIONS","PHI_POSITIONS","THETA_INTERVAL","PHI_INTERVAL","Torus","_BaseScene","speedTheta","overallVelocityX","speedPhi","overallVelocityY","handlePosts","items","thetaSize","phiSize","item","index","mesh","image","link","thetaGroup","add","setupTorus","hexagonCoordMatrix","buildPositionMatrix","z","phiGroup","blogClient","Post","list","then","response","layout","data","console","log","initialTheta","initialPhi","_ref","location","href","rotation","prototype","assertThisInitialized_default","DeviceMotionEvent","requestPermission","permissionState","accelerationIncludingGravity","catch","error","ArrowRight","ArrowLeft","ArrowUp","ArrowDown","Space","App","react_default","a","createElement","components_Torus","__webpack_exports__","Helmet","rel","sizes","hexagons_App","Point2D","point","scale","factor","mappersmith__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","mappersmith__WEBPACK_IMPORTED_MODULE_0___default","n","mappersmith_middleware_encode_json__WEBPACK_IMPORTED_MODULE_1__","mappersmith_middleware_encode_json__WEBPACK_IMPORTED_MODULE_1___default","forge","clientId","host","middleware","EncodeJson","resources","path","random","d","distance2D","distance1D","x1","x2","EXTENT","basicDistance","mirrorDistance","p1","p2","dX","dY","magnitude","sqrt","_THETA_DIVISIONS","layer","positionMatrix","row","Array","thetaOffset","col","assignItemsToNearestAddress","areaSize","addressCoordMatrix","placements","empties","j","buildEmptyPlacements","minDistance","Number","MAX_SAFE_INTEGER","closestHexagon","closestAddress","rowArray","coords","distance"],"mappings":"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","file":"component---src-pages-index-js-8ac26c27619a66f92da2.js","sourcesContent":["import { Component } from \"react\"\nimport * as THREE from \"three\"\n\nconst CAMERA_SPEED_FRICTION = 0.08\n\nclass BaseScene extends Component {\n  constructor(props) {\n    super(props)\n\n    this.cameraPosX = 0\n    this.cameraPosY = 0\n    this.cameraPosZ = 10\n    this.cameraSpeedX = 0\n    this.cameraSpeedY = 0\n    this.cameraSpeedZ = 0\n\n    this.raycaster = new THREE.Raycaster()\n\n    this.position = 0\n\n    this.meshObjects = []\n    this.keyHandler = {}\n    this.swipeHandler = () => {}\n  }\n\n  componentDidMount() {\n    document.body.style.overflow = \"hidden\"\n\n    const { innerWidth: width, innerHeight: height } = window\n\n    // Add canvas\n    this.renderer = new THREE.WebGLRenderer()\n    document.body.appendChild(this.renderer.domElement)\n\n    this.scene = new THREE.Scene()\n\n    this.renderer.setSize(width, height)\n\n    let fov = 60\n    let near = 1\n    this.far = 10\n\n    // Set up camera and scene\n    this.camera = new THREE.PerspectiveCamera(\n      fov,\n      width / height,\n      near,\n      this.far\n    )\n\n    window.addEventListener(\"resize\", this.onDocumentResize)\n    document.addEventListener(\"keydown\", this.onDocumentKeyDown)\n\n    const Hammer = require(\"hammerjs\")\n\n    var hammer = new Hammer(this.renderer.domElement)\n    hammer.get(\"swipe\").set({ direction: Hammer.DIRECTION_ALL })\n    hammer.on(\"swipe\", this.swipeHandler)\n    hammer.on(\"tap\", this.tapHandler)\n  }\n\n  onDocumentKeyDown = event => {\n    const handler = this.keyHandler[event.code]\n    handler && handler(event)\n  }\n\n  tapHandler = event => {\n    const { x: eventX, y: eventY } = event.center\n\n    var mouse = new THREE.Vector2()\n    mouse.x = (eventX / this.renderer.domElement.clientWidth) * 2 - 1\n    mouse.y = -(eventY / this.renderer.domElement.clientHeight) * 2 + 1\n\n    this.raycaster.setFromCamera(mouse, this.camera)\n\n    var intersects = this.raycaster.intersectObjects(this.group.children)\n\n    if (intersects.length > 0) {\n      this.handleObjectTapped(intersects[0].object)\n      return true\n    }\n  }\n\n  animate = () => {\n    requestAnimationFrame(this.animate)\n\n    this.updateCameraPosition()\n\n    this.renderer.render(this.scene, this.camera)\n  }\n\n  updateCameraPosition = () => {\n    this.cameraSpeedX *= 1.0 - CAMERA_SPEED_FRICTION\n    this.cameraSpeedY *= 1.0 - CAMERA_SPEED_FRICTION\n    this.cameraSpeedZ *= 1.0 - CAMERA_SPEED_FRICTION\n\n    this.cameraPosX += this.cameraSpeedX\n    this.cameraPosY += this.cameraSpeedY\n    this.cameraPosZ += this.cameraSpeedZ\n\n    this.camera.position.set(this.cameraPosX, this.cameraPosY, this.cameraPosZ)\n  }\n\n  onDocumentResize = () => {\n    const { innerWidth: width, innerHeight: height } = window\n\n    this.renderer.setSize(width, height)\n    this.camera.aspect = width / height\n    this.camera.updateProjectionMatrix()\n  }\n\n  render() {\n    return null\n  }\n}\n\nexport default BaseScene\n","import * as THREE from \"three\"\nimport { Vector2, Vector3, Mesh, Geometry, Renderer } from \"./three.d\"\nimport { Item, Point2D } from \"../../../lib/ForceDirectedGraph\"\n\nlet R = 10\nlet r = 3\n\nexport const setTorusDimensions = (_R: number, _r: number): void => {\n  R = _R\n  r = _r\n}\n\nexport const getUnitHexagon2d = (): Vector2[] => {\n  const points = []\n  for (let angle = 0; angle < 2 * Math.PI; angle += Math.PI / 3) {\n    const vertex = new THREE.Vector2(Math.cos(angle), Math.sin(angle))\n    points.push(vertex)\n  }\n  return points\n}\n\nconst unitHexagon = getUnitHexagon2d()\n\nexport const projectOntoTorus = (theta: number, phi: number): Vector3 => {\n  const major = R + r * Math.cos(phi)\n  return new THREE.Vector3(\n    major * Math.cos(theta),\n    r * Math.sin(phi),\n    major * Math.sin(theta)\n  )\n}\n\nexport const getHexagonGeometry = (\n  positionTheta: number,\n  positionPhi: number,\n  sizeTheta: number,\n  sizePhi: number\n): Geometry => {\n  const geom = new THREE.Geometry()\n\n  geom.vertices.push(projectOntoTorus(positionTheta, positionPhi))\n\n  const uvs = [new THREE.Vector2(0.5, 0.5)]\n\n  unitHexagon.forEach(vertex => {\n    geom.vertices.push(\n      projectOntoTorus(\n        positionTheta + sizeTheta * vertex.x,\n        positionPhi + sizePhi * vertex.y\n      )\n    )\n    uvs.push(new THREE.Vector2(0.5 - 0.5 * vertex.x, 0.5 - 0.5 * vertex.y))\n  })\n\n  for (let i = 1; i <= 6; i++) {\n    const face = new THREE.Face3(0, i, i + 1)\n    geom.faces.push(face)\n    geom.faceVertexUvs[0].push([uvs[0], uvs[i], uvs[i + 1]])\n  }\n\n  return geom\n}\n\nconst hexagonGeometry = getHexagonGeometry()\n\nexport const hexagonMeshForImage = (\n  imageUrl: string,\n  renderer: Renderer\n): Mesh => {\n  var texture = new THREE.TextureLoader().load(imageUrl)\n  texture.anisotropy = renderer.getMaxAnisotropy()\n\n  var material = new THREE.MeshBasicMaterial({\n    map: texture,\n  })\n\n  return new THREE.Mesh(hexagonGeometry, material)\n}\n\nexport const meshForGeometryAndImage = (\n  geometry: Geometry,\n  imageUrl: string,\n  renderer: Renderer\n): Mesh => {\n  var texture = new THREE.TextureLoader().load(imageUrl)\n  texture.anisotropy = renderer.capabilities.getMaxAnisotropy()\n\n  var material = new THREE.MeshBasicMaterial({\n    map: texture,\n  })\n\n  return new THREE.Mesh(geometry, material)\n}\n\nexport const projectVectorOntoTorus = (vec: Point2D): Vector3 => {\n  const major = R + r * Math.cos(vec.y)\n  return new THREE.Vector3(\n    major * Math.cos(vec.x),\n    r * Math.sin(vec.y),\n    major * Math.sin(vec.x)\n  )\n}\n","import BaseScene from \"./BaseScene\"\nimport * as THREE from \"three\"\nimport { buildPositionMatrix } from \"../../../lib/hexGrid\"\nimport blogClient from \"../../clients/blog\"\nimport {\n  setTorusDimensions,\n  getHexagonGeometry,\n  meshForGeometryAndImage,\n} from \"./utils\"\n\nconst TWO_PI = 2 * Math.PI\nconst R = 20\nconst r = 4\nconst CAMERA_SPEED_FRICTION = 0.05\nconst PHI_THROTTLE_DELTA = 0.01\nconst THETA_THROTTLE_DELTA = 0.005\n\nconst THETA_POSITIONS = 50\nconst THETA_DIVISIONS = 3 * THETA_POSITIONS\nconst PHI_POSITIONS = 40 // even\n\nconst THETA_INTERVAL = TWO_PI / THETA_DIVISIONS\nconst PHI_INTERVAL = TWO_PI / PHI_POSITIONS\n\nsetTorusDimensions(R, r)\n\nclass Torus extends BaseScene {\n  constructor() {\n    super()\n\n    this.thetaGroup = new THREE.Group()\n    this.group = this.thetaGroup\n    this.phiGroup = new THREE.Group()\n\n    this.cameraPosZ = 0\n\n    this.positionTheta = 4.28\n    this.positionPhi = 34.7\n\n    this.speedTheta = 0.005\n    this.speedPhi = 0\n\n    this.keyHandler = {\n      ArrowRight: () => (this.speedTheta -= THETA_THROTTLE_DELTA),\n      ArrowLeft: () => (this.speedTheta += THETA_THROTTLE_DELTA),\n      ArrowUp: () => (this.speedPhi -= PHI_THROTTLE_DELTA),\n      ArrowDown: () => (this.speedPhi += PHI_THROTTLE_DELTA),\n      Space: () => console.log(this.positionTheta, this.positionPhi),\n    }\n  }\n\n  swipeHandler = event => {\n    this.speedTheta += 0.01 * event.overallVelocityX\n    this.speedPhi -= 0.01 * event.overallVelocityY\n  }\n\n  handlePosts = items => {\n    const thetaSize = 0.97 * THETA_INTERVAL\n    const phiSize = (0.97 * PHI_INTERVAL) / Math.sin(Math.PI / 3)\n\n    items.forEach((item, index) => {\n      const mesh = meshForGeometryAndImage(\n        getHexagonGeometry(\n          item.position.x,\n          item.position.y,\n          thetaSize,\n          phiSize\n        ),\n        item.image,\n        this.renderer\n      )\n\n      mesh.link = item.link\n      this.thetaGroup.add(mesh)\n    })\n  }\n\n  setupTorus = () => {\n    this.hexagonCoordMatrix = buildPositionMatrix(\n      THETA_POSITIONS,\n      PHI_POSITIONS\n    )\n\n    this.thetaGroup.position.z = -0.95 * R\n\n    this.phiGroup.add(this.thetaGroup)\n\n    this.scene.add(this.phiGroup)\n\n    blogClient.Post.list().then(response => {\n      const layout = response.data().layout\n      console.log({ layout })\n      if (layout.initialTheta) this.positionTheta = layout.initialTheta\n      if (layout.initialPhi) this.positionPhi = layout.initialPhi\n\n      const items = response.data().items\n      this.handlePosts(items)\n    })\n\n    this.animate()\n  }\n\n  handleObjectTapped = ({ link }) => {\n    document.location.href = link\n  }\n\n  updateCameraPosition = () => {\n    this.speedTheta *= 1.0 - CAMERA_SPEED_FRICTION\n    this.speedPhi *= 1.0 - CAMERA_SPEED_FRICTION\n\n    this.positionPhi += this.speedPhi\n    this.positionTheta += this.speedTheta\n\n    this.thetaGroup.rotation.y = this.positionTheta\n    this.phiGroup.rotation.x = this.positionPhi\n  }\n\n  tapHandler = event => {\n    const tapHandled = super.tapHandler(event)\n\n    if (tapHandled) return\n\n    // feature detect\n    if (typeof DeviceMotionEvent.requestPermission === \"function\") {\n      DeviceMotionEvent.requestPermission()\n        .then(permissionState => {\n          if (permissionState === \"granted\") {\n            function handleMotionEvent(event) {\n              this.speedPhi += 0.1 * event.accelerationIncludingGravity.x\n              // this.speedTheta += event.accelerationIncludingGravity.z\n            }\n\n            window.addEventListener(\"devicemotion\", handleMotionEvent, true)\n          }\n        })\n        .catch(console.error)\n    } else {\n      // handle regular non iOS 13+ devices\n    }\n  }\n\n  componentDidMount() {\n    super.componentDidMount()\n\n    this.camera.position.set(this.cameraPosX, this.cameraPosY, this.cameraPosZ)\n\n    this.setupTorus()\n  }\n}\n\nexport default Torus\n","import React from \"react\"\n\nimport Torus from \"./components/Torus\"\n\nconst App = () => <Torus />\n\nexport default App\n","import React from \"react\"\nimport TorusTiledWithHexagonImages from \"../hexagons/App\"\nimport { Helmet } from \"react-helmet\"\nimport \"../hexagons/index.css\"\n\nexport default () => (\n  <div>\n    <Helmet>\n      <title>Joe's Web Page</title>\n      <link rel=\"apple-touch-icon\" href=\"/homescreen_icon.png\" />\n      <link rel=\"icon\" sizes=\"192x192\" href=\"/android_icon.png\" />\n    </Helmet>\n\n    <TorusTiledWithHexagonImages />\n  </div>\n)\n","class Point2D {\n  public x: number\n  public y: number\n\n  constructor(x: number, y: number) {\n    this.x = x\n    this.y = y\n  }\n\n  public add(point: Point2D): Point2D {\n    this.x += point.x\n    this.y += point.y\n\n    return this\n  }\n\n  public scale(factor: number): Point2D {\n    this.x *= factor\n    this.y *= factor\n\n    return this\n  }\n}\n\nexport default Point2D\n","import forge from \"mappersmith\"\nimport EncodeJson from \"mappersmith/middleware/encode-json\"\n\nexport default forge({\n  clientId: \"joes-blog\",\n  host: \"\",\n  middleware: [EncodeJson],\n  resources: {\n    Post: {\n      list: { path: \"/feed-1.json?z=\" + Math.random() }, // process.env.POSTS_ENDPOINT\n    },\n  },\n})\n","import { Distance2D } from \"./types.d\"\nimport Point2D from \"./Point2D\"\n\nexport const distance1D = (x1: number, x2: number, EXTENT: number): number => {\n  if (x1 == x2) {\n    return 0\n  }\n  const basicDistance = x2 - x1\n  if (x1 < x2) {\n    const mirrorDistance = x1 + EXTENT - x2\n\n    if (basicDistance < mirrorDistance) {\n      return basicDistance\n    }\n    return -mirrorDistance\n  } else {\n    const mirrorDistance = x2 + EXTENT - x1\n\n    if (-basicDistance < mirrorDistance) {\n      return basicDistance\n    }\n    return mirrorDistance\n  }\n}\n\nexport const distance2D = (\n  p1: Point2D,\n  p2: Point2D,\n  EXTENT: Point2D\n): Distance2D => {\n  const dX = distance1D(p1.x, p2.x, EXTENT.x)\n  const dY = distance1D(p1.y, p2.y, EXTENT.y)\n  const magnitude = Math.sqrt(dX * dX + dY * dY)\n\n  return {\n    magnitude,\n    direction: { x: dX / magnitude, y: dY / magnitude },\n  }\n}\n","import { distance2D } from \"./ForceDirectedGraph/distance\"\nimport { uniq } from \"ramda\"\nimport Point2D from \"./ForceDirectedGraph/Point2D\"\nimport { Address, Distance2D } from \"./ForceDirectedGraph/types.d\"\n\nconst NEIGHBORS = [\n  { row: 1, col: 0 },\n  { row: 2, col: 0 },\n  { row: 1, col: -1 },\n  { row: -1, col: -1 },\n  { row: -2, col: 0 },\n  { row: -1, col: 0 },\n]\n\nexport const getNeighbor = (\n  col: number,\n  row: number,\n  neighborIndex: number,\n  THETA_POSITIONS: number,\n  PHI_POSITIONS: number\n): Address => {\n  const neighbor = NEIGHBORS[neighborIndex]\n\n  const newRow = row + neighbor.row\n  const newCol = col + neighbor.col\n\n  return {\n    row: newRow < 0 ? newRow + PHI_POSITIONS : newRow % PHI_POSITIONS,\n    col: newCol < 0 ? newCol + THETA_POSITIONS : newCol % THETA_POSITIONS,\n  }\n}\n\nexport const buildPositionMatrix = (\n  THETA_POSITIONS: number,\n  PHI_POSITIONS: number\n): Point2D[][] => {\n  const _THETA_DIVISIONS = 3 * THETA_POSITIONS\n\n  const THETA_INTERVAL = (2 * Math.PI) / _THETA_DIVISIONS\n  const PHI_INTERVAL = (2 * Math.PI) / PHI_POSITIONS\n\n  let layer = 0\n  const positionMatrix = []\n\n  for (let row = 0; row < PHI_POSITIONS; row++) {\n    positionMatrix[row] = Array(THETA_POSITIONS)\n\n    const thetaOffset = layer % 2 === 1 ? 1.5 * THETA_INTERVAL : 0\n\n    for (let col = 0; col < THETA_POSITIONS; col++) {\n      positionMatrix[row][col] = new Point2D(\n        thetaOffset + 3 * col * THETA_INTERVAL,\n        row * PHI_INTERVAL\n      )\n    }\n\n    layer++\n  }\n\n  return positionMatrix\n}\n/*\nexport const buildDistanceMatrix = (\n  positionMatrix: object[][],\n  COL_COUNT,\n  ROW_COUNT,\n  extents = { x: 2 * Math.PI, y: 2 * Math.PI }\n): Distance2D[][][][] => {\n  const distances = Array(ROW_COUNT)\n\n  for (let i = 0; i < ROW_COUNT; i++) {\n    distances[i] = Array(COL_COUNT)\n    for (let j = 0; j < COL_COUNT; j++) {\n      distances[i][j] = Array(ROW_COUNT)\n      for (let k = 0; k < ROW_COUNT; k++) {\n        distances[i][j][k] = Array(COL_COUNT)\n        for (let l = 0; l < COL_COUNT; l++) {\n          distances[i][j][k][l] = distance2D(\n            positionMatrix[i][j],\n            positionMatrix[k][l],\n            extents\n          )\n        }\n      }\n    }\n  }\n\n  return distances\n}\n*/\n\nexport const buildEmptyPlacements = (\n  THETA_POSITIONS: number,\n  PHI_POSITIONS: number\n): object[][] => {\n  const empties = []\n\n  for (let i = 0; i < PHI_POSITIONS; i++) {\n    empties[i] = Array(THETA_POSITIONS)\n    for (let j = 0; j < THETA_POSITIONS; j++) {\n      empties[i][j] = null\n    }\n  }\n\n  return empties\n}\n\nconst getPrecomputedDistance = (\n  c1: Address,\n  c2: Address,\n  distanceMatrix: Distance2D[][][][]\n): Distance2D => distanceMatrix[c1.row][c1.col][c2.row][c2.col]\n\nexport const assignItemsToNearestAddress = (\n  items,\n  areaSize,\n  addressCoordMatrix,\n  THETA_POSITIONS,\n  PHI_POSITIONS\n) => {\n  const placements = buildEmptyPlacements(THETA_POSITIONS, PHI_POSITIONS)\n\n  items.forEach(item => {\n    const { position } = item\n\n    let minDistance = { magnitude: Number.MAX_SAFE_INTEGER }\n    let closestHexagon = null,\n      closestAddress = null\n\n    addressCoordMatrix.forEach((rowArray, row) => {\n      rowArray.forEach((coords, col) => {\n        if (!placements[row][col]) {\n          const distance = distance2D(position, coords, areaSize)\n\n          if (distance.magnitude < minDistance.magnitude) {\n            minDistance = distance\n            closestHexagon = coords\n            closestAddress = { row, col }\n          }\n        }\n      })\n    })\n\n    if (closestHexagon) {\n      item.position = new Point2D(closestHexagon.x, closestHexagon.y)\n      placements[closestAddress.row][closestAddress.col] = item\n    }\n  })\n}\n"],"sourceRoot":""}