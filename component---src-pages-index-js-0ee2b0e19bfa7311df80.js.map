{"version":3,"sources":["webpack:///./src/hexagons/components/Torus/BaseScene.js","webpack:///./src/hexagons/components/Torus/utils.js","webpack:///./src/hexagons/clients/blog.js","webpack:///./src/hexagons/components/Torus/index.js","webpack:///./src/hexagons/App.js","webpack:///./src/pages/index.js"],"names":["CAMERA_SPEED_FRICTION","BaseScene","props","_this","_Component","call","this","tapHandler","event","console","log","onDocumentKeyDown","handler","keyHandler","code","onDocumentResize","_window","window","width","innerWidth","height","innerHeight","renderer","setSize","camera","aspect","updateProjectionMatrix","preventDefault","_event$center","center","eventX","x","eventY","y","mouse","THREE","domElement","clientWidth","clientHeight","raycaster","setFromCamera","intersects","intersectObjects","group","children","length","postId","object","animate","requestAnimationFrame","updateCameraPosition","render","scene","cameraSpeedX","cameraSpeedY","cameraSpeedZ","cameraPosX","cameraPosY","cameraPosZ","position","set","meshObjects","swipeHandler","componentDidMount","document","body","style","overflow","_window2","appendChild","far","addEventListener","Hammer","require","hammer","get","direction","DIRECTION_ALL","on","Component","unitHexagon","points","angle","Math","PI","vertex","cos","sin","push","getUnitHexagon2d","projectOntoTorus","theta","phi","major","R","r","getHexagonGeometry","positionTheta","positionPhi","sizeTheta","sizePhi","geom","vertices","uvs","forEach","i","face","faces","faceVertexUvs","meshForGeometryAndImage","geometry","imageUrl","texture","load","anisotropy","capabilities","getMaxAnisotropy","material","map","forge","clientId","host","middleware","EncodeJson","resources","Post","list","path","random","PHI_THROTTLE_DELTA","THETA_THROTTLE_DELTA","THETA_POSITIONS","THETA_DIVISIONS","PHI_DIVISIONS","thetaInterval","phiInterval","Torus","_BaseScene","speedTheta","overallVelocityX","speedPhi","overallVelocityY","handlePosts","items","thumbnails","flatten","_ref","link","images","image","thetaSize","getThetaSize","phiSize","getPhiSize","placements","j","Array","thumbnail","index","row","floor","col","coords","hexagonCoordMatrix","mesh","thetaGroup","add","setupTorus","l","line","depthTest","opacity","transparent","layer","thetaOffset","blogClient","then","response","data","z","phiGroup","location","href","rotation","ArrowRight","ArrowLeft","ArrowUp","ArrowDown","prototype","App","react_default","a","createElement","components_Torus","__webpack_exports__","Helmet","rel","sizes","src_hexagons_App"],"mappings":"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","file":"component---src-pages-index-js-0ee2b0e19bfa7311df80.js","sourcesContent":["import { Component } from \"react\"\nimport * as THREE from \"three\"\n\nconst CAMERA_SPEED_FRICTION = 0.08\n\nclass BaseScene extends Component {\n  constructor(props) {\n    super(props)\n\n    this.cameraPosX = 0\n    this.cameraPosY = 0\n    this.cameraPosZ = 10\n    this.cameraSpeedX = 0\n    this.cameraSpeedY = 0\n    this.cameraSpeedZ = 0\n\n    this.raycaster = new THREE.Raycaster()\n\n    this.position = 0\n\n    this.meshObjects = []\n    this.keyHandler = {}\n    this.swipeHandler = () => {}\n  }\n\n  componentDidMount() {\n    document.body.style.overflow = \"hidden\"\n\n    const { innerWidth: width, innerHeight: height } = window\n\n    // Add canvas\n    this.renderer = new THREE.WebGLRenderer()\n    document.body.appendChild(this.renderer.domElement)\n\n    this.scene = new THREE.Scene()\n\n    this.renderer.setSize(width, height)\n\n    let fov = 60\n    let near = 1\n    this.far = 10\n\n    // Set up camera and scene\n    this.camera = new THREE.PerspectiveCamera(\n      fov,\n      width / height,\n      near,\n      this.far\n    )\n\n    window.addEventListener(\"resize\", this.onDocumentResize)\n    document.addEventListener(\"keydown\", this.onDocumentKeyDown)\n\n    const Hammer = require(\"hammerjs\")\n\n    var hammer = new Hammer(this.renderer.domElement)\n    hammer.get(\"swipe\").set({ direction: Hammer.DIRECTION_ALL })\n    hammer.on(\"swipe\", this.swipeHandler)\n    hammer.on(\"tap\", this.tapHandler)\n  }\n\n  tapHandler = event => {\n    console.log(\"tap\", { event })\n  }\n\n  onDocumentKeyDown = event => {\n    const handler = this.keyHandler[event.code]\n    handler && handler(event)\n  }\n\n  onDocumentResize = () => {\n    const { innerWidth: width, innerHeight: height } = window\n\n    this.renderer.setSize(width, height)\n    this.camera.aspect = width / height\n    this.camera.updateProjectionMatrix()\n  }\n\n  tapHandler = event => {\n    event.preventDefault()\n    const { x: eventX, y: eventY } = event.center\n\n    var mouse = new THREE.Vector2()\n    mouse.x = (eventX / this.renderer.domElement.clientWidth) * 2 - 1\n    mouse.y = -(eventY / this.renderer.domElement.clientHeight) * 2 + 1\n\n    this.raycaster.setFromCamera(mouse, this.camera)\n\n    var intersects = this.raycaster.intersectObjects(this.group.children)\n\n    if (intersects.length > 0) {\n      const { postId } = intersects[0].object\n      console.log({ postId })\n    }\n  }\n\n  animate = () => {\n    requestAnimationFrame(this.animate)\n\n    this.updateCameraPosition()\n\n    this.renderer.render(this.scene, this.camera)\n  }\n\n  updateCameraPosition = () => {\n    this.cameraSpeedX *= 1.0 - CAMERA_SPEED_FRICTION\n    this.cameraSpeedY *= 1.0 - CAMERA_SPEED_FRICTION\n    this.cameraSpeedZ *= 1.0 - CAMERA_SPEED_FRICTION\n\n    this.cameraPosX += this.cameraSpeedX\n    this.cameraPosY += this.cameraSpeedY\n    this.cameraPosZ += this.cameraSpeedZ\n\n    this.camera.position.set(this.cameraPosX, this.cameraPosY, this.cameraPosZ)\n  }\n\n  render() {\n    return null\n  }\n}\n\nexport default BaseScene\n","import * as THREE from \"three\"\n\nexport const getUnitHexagon2d = () => {\n  const points = []\n  for (let angle = 0; angle < 2 * Math.PI; angle += Math.PI / 3) {\n    const vertex = new THREE.Vector2(Math.cos(angle), Math.sin(angle))\n    points.push(vertex)\n  }\n  return points\n}\n\nconst unitHexagon = getUnitHexagon2d()\n\nexport const projectOntoTorus = (theta, phi) => {\n  const major = R + r * Math.cos(phi)\n  return new THREE.Vector3(\n    major * Math.cos(theta),\n    r * Math.sin(phi),\n    major * Math.sin(theta)\n  )\n}\n\nexport const getHexagonGeometry = (\n  positionTheta,\n  positionPhi,\n  sizeTheta,\n  sizePhi\n) => {\n  const geom = new THREE.Geometry()\n\n  geom.vertices.push(projectOntoTorus(positionTheta, positionPhi))\n\n  const uvs = [new THREE.Vector2(0.5, 0.5)]\n\n  unitHexagon.forEach(vertex => {\n    geom.vertices.push(\n      projectOntoTorus(\n        positionTheta + sizeTheta * vertex.x,\n        positionPhi + sizePhi * vertex.y\n      )\n    )\n    uvs.push(new THREE.Vector2(0.5 - 0.5 * vertex.x, 0.5 - 0.5 * vertex.y))\n  })\n\n  for (let i = 1; i <= 6; i++) {\n    const face = new THREE.Face3(0, i, i + 1)\n    geom.faces.push(face)\n    geom.faceVertexUvs[0].push([uvs[0], uvs[i], uvs[i + 1]])\n  }\n\n  return geom\n}\n\nconst hexagonGeometry = getHexagonGeometry()\n\nexport const hexagonMeshForImage = (imageUrl, renderer) => {\n  var texture = new THREE.TextureLoader().load(imageUrl)\n  texture.anisotropy = renderer.getMaxAnisotropy()\n\n  var material = new THREE.MeshBasicMaterial({\n    map: texture,\n  })\n\n  return new THREE.Mesh(hexagonGeometry, material)\n}\n\nexport const meshForGeometryAndImage = (geometry, imageUrl, renderer) => {\n  var texture = new THREE.TextureLoader().load(imageUrl)\n  texture.anisotropy = renderer.capabilities.getMaxAnisotropy()\n\n  var material = new THREE.MeshBasicMaterial({\n    map: texture,\n  })\n\n  return new THREE.Mesh(geometry, material)\n}\n\nexport const HALF_HEIGHT = Math.sin(Math.PI / 3)\n\nlet R = 10\nlet r = 3\nlet THETA_POSITIONS\nlet PHI_POSITIONS\n\nexport const setTorusDimensions = (\n  _R,\n  _r,\n  _THETA_POSITIONS,\n  _PHI_POSITIONS\n) => {\n  R = _R\n  r = _r\n  THETA_POSITIONS = _THETA_POSITIONS\n  PHI_POSITIONS = _PHI_POSITIONS\n}\n\nexport const projectVectorOntoTorus = vec => {\n  const major = R + r * Math.cos(vec.y)\n  return new THREE.Vector3(\n    major * Math.cos(vec.x),\n    r * Math.sin(vec.y),\n    major * Math.sin(vec.x)\n  )\n}\n\nconst NEIGHBORS = [\n  { row: 1, col: 0 },\n  { row: 2, col: 0 },\n  { row: 1, col: -1 },\n  { row: -1, col: -1 },\n  { row: -2, col: 0 },\n  { row: -1, col: 0 },\n]\nexport const getNeighbor = (col, row, neighborIndex) => {\n  const neighbor = NEIGHBORS[neighborIndex]\n\n  const newRow = row + neighbor.row\n  const newCol = col + neighbor.col\n\n  return {\n    row: newRow < 0 ? newRow + PHI_POSITIONS : newRow % PHI_POSITIONS,\n    col: newCol < 0 ? newCol + THETA_POSITIONS : newCol % THETA_POSITIONS,\n  }\n}\n","import forge from \"mappersmith\"\nimport EncodeJson from \"mappersmith/middleware/encode-json\"\n\nexport default forge({\n  clientId: \"joes-blog\",\n  host: \"\",\n  middleware: [EncodeJson],\n  resources: {\n    Post: {\n      list: { path: \"/feed-1.json?z=\" + Math.random() }, // process.env.POSTS_ENDPOINT\n    },\n  },\n})\n","import BaseScene from \"./BaseScene\"\nimport * as THREE from \"three\"\nimport {\n  setTorusDimensions,\n  projectOntoTorus,\n  getHexagonGeometry,\n  meshForGeometryAndImage,\n} from \"./utils\"\nimport blogClient from \"../../clients/blog\"\nimport { flatten } from \"ramda\"\n\nconst R = 20\nconst r = 4\nconst CAMERA_SPEED_FRICTION = 0.05\nconst PHI_THROTTLE_DELTA = 0.01\nconst THETA_THROTTLE_DELTA = 0.005\n\nconst THETA_POSITIONS = 50\nconst THETA_DIVISIONS = 3 * THETA_POSITIONS\nconst PHI_DIVISIONS = 40 // even\n\nconst thetaInterval = (2 * Math.PI) / THETA_DIVISIONS\nconst phiInterval = (2 * Math.PI) / PHI_DIVISIONS\n\nsetTorusDimensions(R, r, THETA_POSITIONS, PHI_DIVISIONS)\n\nclass Torus extends BaseScene {\n  constructor() {\n    super()\n\n    this.thetaGroup = new THREE.Group()\n    this.phiGroup = new THREE.Group()\n\n    this.cameraPosX = 0\n    this.cameraPosY = 0\n    this.cameraPosZ = 0\n\n    this.positionTheta = 4.6\n    this.positionPhi = Math.PI + 0.3\n\n    this.speedTheta = 0.005\n    this.speedPhi = 0\n\n    this.keyHandler = {\n      ArrowRight: () => {\n        this.speedTheta -= THETA_THROTTLE_DELTA\n      },\n      ArrowLeft: () => {\n        this.speedTheta += THETA_THROTTLE_DELTA\n      },\n\n      ArrowUp: () => {\n        this.speedPhi -= PHI_THROTTLE_DELTA\n      },\n      ArrowDown: () => {\n        this.speedPhi += PHI_THROTTLE_DELTA\n      },\n    }\n  }\n\n  swipeHandler = event => {\n    this.speedTheta += 0.01 * event.overallVelocityX\n    this.speedPhi -= 0.01 * event.overallVelocityY\n  }\n\n  handlePosts = items => {\n    const thumbnails = flatten(\n      items.map(({ link, images }) =>\n        images.map(image => ({\n          link,\n          image,\n        }))\n      )\n    )\n\n    const thetaSize = this.getThetaSize()\n    const phiSize = this.getPhiSize()\n\n    const placements = []\n    for (let j = 0; j < PHI_DIVISIONS; j++) {\n      placements[j] = new Array(THETA_POSITIONS)\n      for (let i = 0; i < THETA_POSITIONS; i++) {\n        placements[j][i] = false\n      }\n    }\n\n    thumbnails.forEach((thumbnail, index) => {\n      if (!thumbnail) return\n\n      const row = Math.floor(index / THETA_POSITIONS)\n      const col = index % THETA_POSITIONS\n\n      const coords = this.hexagonCoordMatrix[row][col]\n\n      const mesh = meshForGeometryAndImage(\n        getHexagonGeometry(coords.theta, coords.phi, thetaSize, phiSize),\n        thumbnail.image,\n        this.renderer\n      )\n      mesh.link = thumbnail.link\n      this.thetaGroup.add(mesh)\n\n      index++\n    })\n  }\n\n  getThetaSize = () => {\n    return 0.97 * thetaInterval\n  }\n  getPhiSize = () => {\n    return (0.97 * phiInterval) / Math.sin(Math.PI / 3)\n  }\n\n  setupTorus = () => {\n    const vertices = []\n\n    for (let i = 0; i < 2 * Math.PI; i += thetaInterval) {\n      for (let j = 0; j < 2 * Math.PI; j += phiInterval) {\n        vertices.push(projectOntoTorus(i, j))\n      }\n    }\n\n    const geom = new THREE.Geometry()\n\n    vertices.forEach(vertex => {\n      geom.vertices.push(vertex)\n    })\n\n    const l = geom.vertices.length\n\n    for (let i = 0; i < l; i++) {\n      const face = new THREE.Face3(i, (i + PHI_DIVISIONS) % l, (i + 1) % l)\n      geom.faces.push(face)\n    }\n\n    var line = new THREE.LineSegments(new THREE.WireframeGeometry(geom))\n    line.material.depthTest = true\n    line.material.opacity = 1\n    line.material.transparent = true\n\n    let layer = 0\n\n    this.hexagonCoordMatrix = []\n\n    for (let row = 0; row < PHI_DIVISIONS; row++) {\n      this.hexagonCoordMatrix[row] = Array(THETA_POSITIONS)\n\n      const thetaOffset = layer++ % 2 === 1 ? 1.5 * thetaInterval : 0\n\n      for (let col = 0; col < THETA_POSITIONS; col++) {\n        this.hexagonCoordMatrix[row][col] = {\n          phi: row * phiInterval,\n          theta: thetaOffset + 3 * col * thetaInterval,\n        }\n      }\n    }\n\n    blogClient.Post.list().then(response => {\n      const items = response.data().items\n      this.handlePosts(items)\n    })\n\n    this.thetaGroup.position.z = -0.95 * R\n\n    this.phiGroup.add(this.thetaGroup)\n\n    this.scene.add(this.phiGroup)\n\n    this.animate()\n  }\n\n  tapHandler = event => {\n    const { x: eventX, y: eventY } = event.center\n\n    var mouse = new THREE.Vector2()\n    mouse.x = (eventX / this.renderer.domElement.clientWidth) * 2 - 1\n    mouse.y = -(eventY / this.renderer.domElement.clientHeight) * 2 + 1\n\n    this.raycaster.setFromCamera(mouse, this.camera)\n\n    var intersects = this.raycaster.intersectObjects(this.thetaGroup.children)\n\n    if (intersects.length > 0) {\n      const { link } = intersects[0].object\n      document.location.href = link\n    }\n  }\n\n  updateCameraPosition = () => {\n    this.speedTheta *= 1.0 - CAMERA_SPEED_FRICTION\n    this.speedPhi *= 1.0 - CAMERA_SPEED_FRICTION\n\n    this.positionPhi += this.speedPhi\n    this.positionTheta += this.speedTheta\n\n    this.thetaGroup.rotation.y = this.positionTheta\n    this.phiGroup.rotation.x = this.positionPhi\n  }\n\n  componentDidMount() {\n    super.componentDidMount()\n\n    this.camera.position.set(this.cameraPosX, this.cameraPosY, this.cameraPosZ)\n\n    this.setupTorus()\n  }\n}\n\nexport default Torus\n","import React from \"react\"\nimport \"./App.css\"\n\nimport Torus from \"./components/Torus\"\n\nconst App = () => <Torus />\n\nexport default App\n","import React from \"react\"\nimport TorusTiledWithHexagonImages from \"../hexagons/App\"\nimport { Helmet } from \"react-helmet\"\nimport \"../hexagons/index.css\"\n\nexport default () => (\n  <div>\n    <Helmet>\n      <title>Joe's Web Page</title>\n      <link rel=\"apple-touch-icon\" href=\"/homescreen_icon.png\" />\n      <link rel=\"icon\" sizes=\"192x192\" href=\"/android_icon.png\" />\n    </Helmet>\n\n    <TorusTiledWithHexagonImages />\n  </div>\n)\n"],"sourceRoot":""}