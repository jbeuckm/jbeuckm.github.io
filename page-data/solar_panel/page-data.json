{"componentChunkName":"component---src-templates-post-js","path":"/solar_panel","webpackCompilationHash":"b1c581f1a9801ab1aebb","result":{"data":{"markdownRemark":{"html":"<p>A recent hobby has been to build and install a solar panel on our roof. It's comprised of 36 common Evergreen Solar 3\"x6\" 1.8W cells in a simple wooden frame with a sheet of acrylic to protect them. My Dad helped run conduit and wires last weekend and the open source hardware/software available these days makes it unbelievably easy to setup a voltage logging apparatus. A 10k then a 2.2k resistor straddle the wires coming into our basement from the panel. The junction of those is connected to an analog input on an <a href=\"http://www.arduino.cc/en/Main/ArduinoBoardMini\">Arduino Mini</a> . Every minute, the Atmega reports the value read at that input to the serial port. A simple processing sketch receives the value and makes an HTTP request to my web host, which stores the value in a database. <a href=\"http://code.google.com/p/flot/\">The \"Flot\" plugin for jQuery</a> makes rendering a nice line-graph of the incoming data straightforward. </p>\n<p><a href=\"/solar_day_one-f9ec32d0aa3cbf50309a3f0fe61ac825.jpg\"><img src=\"/solar_day_one-f9ec32d0aa3cbf50309a3f0fe61ac825.jpg\" alt=\"Day One Voltages From Solar Panel\" title=\"solar_day_one\"></a></p>","frontmatter":{"path":"/solar_panel","title":"Solar Panel","date":"2010-07-27","tags":["arduino","electronics","house","solar"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"prev":{"html":"<p><a href=\"/count_buffons_needle-9ca66bee28cb01a74e03c3ab90887a26.png\"><img src=\"/count_buffons_needle-9ca66bee28cb01a74e03c3ab90887a26.png\"></a></p>\n<p>There is an interesting way to calculate PI with random probability called Count Buffon's Needle. The way it's done is to draw parallel lines on a large sheet of paper that are equidistant from each other. Then one would drop needles of exactly that length (the distance between lines) and count both the overall number of needles and the number of needles that intersect the lines on the paper after they settle. The probability of a needle intersecting a line works out to be 2/π. So, 2 times the number of needles divided by the number of intersections gives an approximation of π that gets better as we drop more needles.</p>\n<object type=\"application/x-shockwave-flash\" width=\"400\" height=\"400\">\n  <param name=\"movie\" value=\"/countbuffonsneedle1-602fd61836ef1e9818892dcc094b653c.swf\" />\n</object>","id":"42f239af-824f-5888-85ac-9ecf9b9b0430","frontmatter":{"path":"/count_buffon_s_needle","title":"Count Buffon's Needle","date":"2010-09-21","tags":["programming","physics"],"hexagonImages":["Screen%20shot%202011-07-21%20at%205.18.22%20PM.png_hexagon.png"]}},"next":{"html":"<p>var flashvars = { }; //servicesUrl: \"FlashService.aspx\" var params = { allowNetworking: \"true\", allowscriptaccess: \"always\" }; var attributes = { id: \"flashcontent\", name: \"flashcontent\" }; swfobject.embedSWF(\"/joe/sites/default/files/Granular.swf\", \"flashcontent\", \"640\", \"360\", \"10.0.0\", false, flashvars, params, attributes);</p>\n<p>An upcoming client project presents an opportunity to experiment with granular synthesis in Flash Player 10. The idea is to play back lots of little pieces (grains) of a sound at various times to create a new sound. In this demo, grain playback is accomplished by maintaining a list of GrainDescription objects which store where in the sample the grain started and how much has been played. Then for each sample of output, iterate through the list of grains and add the value of the original sound at each active grain’s current position marker. Grains are added at a given interval and removed when they have played a given amount of time.</p>\n<input type=\"button\" onclick=\"javascript:document.getElementById('granular-swf').start();\" value=\"play\">\n<object id=\"granular-swf\" type=\"application/x-shockwave-flash\"  width=\"634\" height=\"355\">\n  <param name=\"movie\" value=\"/Granular-7acbd29158cba4e2690cdef335a30aa6.swf\" />\n</object>\n<p>This element requires Flash 10.</p>\n<p>This demo provides controls for how fast to move through the sound spawning new grains, how fast to play the grains (pitch), how many samples long each grain should be (length) and how many samples to wait between starting new grains (interval). The green waveform shows the shape of the complete sample. The blue waveform is the shape of the envelope used to scale the amplitude of a grain over its lifetime. This grain envelope shape is the function sin(x)*sin(x) where x runs between zero and pi. Individual grains fade in and out smoothly to avoid the transients (clicks and pops) that would occur if short chops of audio were played directly.</p>\n<p>enjoy <a href=\"/Granular-e8bfcd212de5ba43390f41917ae6f2d0.zip\">source code</a></p>","id":"20f4d8d5-bd76-5a5b-8978-cc66dac82458","frontmatter":{"path":"/granular_synthesis_in_flash","title":"Granular Synthesis in Flash","date":"2010-06-30","tags":["flash","music","programming"],"hexagonImages":["default_hexagon.png"]}}}}}