{"componentChunkName":"component---src-templates-post-js","path":"/mandelbrot_2009","webpackCompilationHash":"b1c581f1a9801ab1aebb","result":{"data":{"markdownRemark":{"html":"<p><img src=\"/mandelbrot-955252adbb3ce0cf6cc624db98c553a0.png\" alt=\"mandelbrot.png\"></p>\n<p>Back in the days of i386 processors, long distance dialup connections and 5.25\" floppy drives, I spent a lot of time with a program called <a href=\"http://spanky.triumf.ca/www/fractint/fractint.html\">FractInt</a>. You could pick an algorithm, set up the location, zoom level and color palette and then wait minutes, hours or days for it to calculate a TOTALLY AWESOME image.</p>\n<p>Now that processors are screaming fast and AS3 is about catching up to the speed of real programming languages, I decided to port the Mandelbrot algorithm and see how fast it could be rendered. This 132x132 image is being calculated each frame with up to 200 iterations per pixel.</p>\n<object type=\"application/x-shockwave-flash\"  width=\"132\" height=\"132\">\n  <param name=\"movie\" value=\"/mandelbrotset-d68eb3a398a5884a5e1e0361f2e29d99.swf\" />\n</object>\n<p>Z = zoom in\nX = zoom out\nmouse = pan</p>\n<p><a href=\"/mandelbrotset-1373a04b16db5cad69358daf7374eb87.as\">source</a></p>","frontmatter":{"path":"/mandelbrot_2009","title":"Mandelbrot 2009","date":"2009-09-21","tags":["programming"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"prev":{"html":"<p>This code draws a Mandelbrot pattern on the 132x132 Nokia 6100 type screen with Epson controller (will not work for the Phillips) from an <a href=\"http://arduino.cc\">Arduino</a>. I started with the code example from <a href=\"http://www.arduino.cc/cgi-bin/yabb2/YaBB.pl?num=1237036119/45\">this post</a> and made some optimizations- especially to the serial communication code. Then I ported the Mandelbrot algorithm from <a href=\"http://www.codeproject.com/KB/cpp/mandelbrot_obfuscation.aspx\">here</a>. The zoom level and viewport into the fractal can easily be changed or made to update each loop. But it's slow.</p>\n<p><img src=\"/pinecar-092441550d5e5ed09d30dd2ded2d2d21.jpg\" alt=\"World&#x27;s first 8Mhz pinewood derby car with 12-bit color?\"></p>\n<p><a href=\"/mandelbrot_zoomer-de659a35c90c05a3c09263f5e6713dcb.pde\">source</a></p>\n<p>To send serial data a bit faster, one might reserve an entire Arduino port and rotate/clock, rotate/clock and so on, instead of repeatedly testing the data byte and flipping a single pin. I still haven't been able to engage the 8-bit color mode, which would again speed things up since I could send one byte per pixel instead of three bytes for two pixels. I used an 8Mhz and would only use 16Mhz or higher setup if I did this again. When will there be a 2Ghz Arduino? Then it might look more like this:</p>\n<p>(needs flash)</p>\n<p><object type=\"application/x-shockwave-flash\"\n  data=\"/mandelbrotset.swf\"\n  width=\"132\" height=\"132\"></p>\n  <param name=\"movie\" value=\"/mandelbrotset.swf\" />\n  <param name=\"quality\" value=\"high\"/>\n</object>\n<p>(mouse left/right for pan, up/down for zoom)</p>","id":"05993b8b-cbec-51ed-9f5a-ebb6b945af3c","frontmatter":{"path":"/12_bit_color_from_arduino_to_nokia_6100_knock_off_lcd","title":"12-bit Color from Arduino to Nokia 6100 Knock-off LCD","date":"2009-09-21","tags":["arduino","artwork","electronics","fractal"],"hexagonImages":["pinecar.jpeg_hexagon.jpeg","pinecar-300x200.jpg_hexagon.jpeg","pinecar.jpg_hexagon.jpeg"]}},"next":{"html":"<p><a href=\"/pgs-905f50325ad14c02b4437e6b51a19cb0.png\"><img src=\"/pgs-905f50325ad14c02b4437e6b51a19cb0.png\"></a></p>\n<p>All the <a href=\"http://box2dflash.sourceforge.net/\">Box2D</a> documentation says to use the automatic gear joint and not to mess with simulating gears this way ...so it had to be done! A little trigonometry and fidgeting with sizes produced this simple planetary set:</p>\n<object type=\"application/x-shockwave-flash\"  width=\"400\" height=\"400\">\n  <param name=\"movie\" value=\"/plexpinballmodule-afac030fa2000bb54605ffd10627421f.swf\" />\n</object>\n<p>I quickly modified my sprocket construction code to make the annulus and spent a while scratching my head before remembering that the shape vertices have to be defined clockwise. Once they were, everything was interacting. But in all honesty, I have to nudge the annulus to get it going no matter how much torque I apply to the sun gear. It would be great to understand why if you know. And it would be really cool to develop an \"eccentric drive\" or two like these:</p>\n<embed src=\"http://www.youtube.com/v/QP5LN9jcsz4&amp;hl=en&amp;fs=1&amp;\" type=\"application/x-shockwave-flash\" allowscriptaccess=\"always\" allowfullscreen=\"true\" width=\"425\" height=\"344\">  \n<embed src=\"http://www.youtube.com/v/8dR38uQN74c&amp;hl=en&amp;fs=1&amp;\" type=\"application/x-shockwave-flash\" allowscriptaccess=\"always\" allowfullscreen=\"true\" width=\"425\" height=\"344\">  \nand eventually...  \n<embed src=\"http://www.youtube.com/v/pHO1JTNPPOU&amp;hl=en&amp;fs=1&amp;\" type=\"application/x-shockwave-flash\" allowscriptaccess=\"always\" allowfullscreen=\"true\" width=\"560\" height=\"340\">","id":"767434d8-ab37-5f75-9954-cd465dc0ce04","frontmatter":{"path":"/box2d_planetary_gear_set","title":"Box2D Planetary Gear Set","date":"2009-09-17","tags":["physics","programming"],"hexagonImages":["pgs.png_hexagon.png"]}}}}}