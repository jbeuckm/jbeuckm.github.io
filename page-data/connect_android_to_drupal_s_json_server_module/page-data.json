{"componentChunkName":"component---src-templates-post-js","path":"/connect_android_to_drupal_s_json_server_module","webpackCompilationHash":"7784f26a06b16b02e72b","result":{"data":{"markdownRemark":{"html":"<p><a href=\"/android_drupal-5b797797681d2bcfa8d22dc738dfd560.png\"><img src=\"/android_drupal-5b797797681d2bcfa8d22dc738dfd560.png\"></a></p>\n<p>The Android SDK comes with a SampleSyncAdapter project for implementing a synced connection to a cloud-type service. The class NetworkUtilities takes care of making the actual HTTP requests, and generally has to be tailored to work with a particular cloud service (apart from the sample server app included with the SDK).</p>\n<p>Here is a base class that handles the session-based authentication for Drupalâ€™s JSON Server module. Extend this class to implement the calls for a particular service model via Drupal / JSON Server.</p>\n<p>This is working with Drupal 6 + Services 3 + REST Server 2 + JSON Server 2</p>\n<p>Source: <a href=\"https://github.com/jbeuckm/Android-SyncAdapter-JSON-Server-Example\">https://github.com/jbeuckm/Android-SyncAdapter-JSON-Server-Example</a></p>\n<pre><code>package com.puny.android.network.util;\n\nimport android.content.Context;\nimport android.os.Handler;\nimport android.util.Log;\n\nimport org.apache.http.protocol.HTTP;\nimport org.apache.http.entity.StringEntity;\nimport org.apache.http.HttpResponse;\nimport org.apache.http.HttpStatus;\nimport org.apache.http.client.HttpClient;\nimport org.apache.http.client.methods.HttpPost;\nimport org.apache.http.conn.params.ConnManagerParams;\nimport org.apache.http.impl.client.DefaultHttpClient;\nimport org.apache.http.message.BasicHeader;\nimport org.apache.http.params.HttpConnectionParams;\nimport org.apache.http.params.HttpParams;\n\nimport org.json.JSONObject;\nimport org.json.JSONException;\n\nimport java.io.IOException;\nimport java.io.BufferedReader;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.util.Map;\nimport java.util.HashMap;\nimport java.util.Iterator;\n\n/\\*\n \\* This base class handles session-based authentication for the \"JSON Server\" Drupal module.\n \\* Extend this class, change to your BASE\\_URL and add requests for a particular REST data model implementation.\n \\*/\npublic class DrupalJSONServerNetworkUtilityBase {\n\n    protected static String TAG = \"JSONServerNetworkUtil\";\n\n    public static final String PARAM\\_SESSION\\_ID = \"sessid\";\n    public static final String PARAM\\_USERNAME = \"name\";\n    public static final String PARAM\\_PASSWORD = \"pass\";\n\n    public static final int REGISTRATION\\_TIMEOUT = 30 \\* 1000; // ms\n\n    public static final String BASE\\_URL = \"http://\\[YOUR JSON SERVER REST ENDPOINT\\]\";\n\n    public static final String CONNECT\\_URI = BASE\\_URL + \"/system/connect.json\";\n    public static final String AUTH\\_URI = BASE\\_URL + \"/user/login.json\";\n\n\n    protected static HttpClient mHttpClient;\n    protected static String mSessId;\n\n\n    /\\*\\*\n     \\* Configures the httpClient to connect to the URL provided.\n     \\*/\n    public static void maybeCreateHttpClient() {\n        if (mHttpClient == null) {\n            mHttpClient = new DefaultHttpClient();\n            final HttpParams params = mHttpClient.getParams();\n            HttpConnectionParams.setConnectionTimeout(params,\n                REGISTRATION\\_TIMEOUT);\n            HttpConnectionParams.setSoTimeout(params, REGISTRATION\\_TIMEOUT);\n            ConnManagerParams.setTimeout(params, REGISTRATION\\_TIMEOUT);\n        }\n    }\n\n    /\\*\\*\n     \\* Executes the network requests on a separate thread.\n     \\*\n     \\* @param runnable The runnable instance containing network mOperations to\n     \\*        be executed.\n     \\*/\n    public static Thread performOnBackgroundThread(final Runnable runnable) {\n        final Thread t = new Thread() {\n            @Override\n            public void run() {\n                try {\n                    runnable.run();\n                } finally {\n\n                }\n            }\n        };\n        t.start();\n        return t;\n    }\n\n\n\n    /\\*\\*\n     \\* Connects to the JSON server, authenticates the provided username and\n     \\* password.\n     \\*\n     \\* @param username The user's username\n     \\* @param password The user's password\n     \\* @param handler The hander instance from the calling UI thread.\n     \\* @param context The context of the calling Activity.\n     \\*\n     \\* @return boolean The boolean result indicating whether the user was\n     \\*         successfully authenticated.\n     \\*/\n    public static boolean authenticate(String username, String password,\n        Handler handler, final Context context) {\n\n        mSessId = connectForSessId(handler, context);\n        Log.d(TAG, \"sessid = \"+mSessId);\n\n        if (mSessId == null) {\n            return false;\n        }\n\n        Map params = new HashMap();\n        params.put(PARAM\\_SESSION\\_ID, mSessId);\n        params.put(PARAM\\_USERNAME, username);\n        params.put(PARAM\\_PASSWORD, password);\n\n        JSONObject json = prepareAndSendHttpPost(AUTH\\_URI, params);\n\n        if (json == null) {\n            Log.d(TAG, \"auth failed\");\n            return false;\n        }\n        else {\n            Log.d(TAG, \"auth successful \"+json.toString());\n            return true;\n        }\n\n    }\n\n    /\\*\n     \\* This handles the initial POST to JSON Server to retrieve the sessid.\n     \\*/\n    protected static String connectForSessId(final Handler handler, final Context context) {\n        Log.d(TAG, \"connectForSessId()\");\n\n        JSONObject json = prepareAndSendHttpPost(CONNECT\\_URI, null);\n        if (json != null) {\n            try {\n                return json.getString(\"sessid\");\n            }\n            catch (JSONException e) {\n                Log.d(TAG, \"could not find sessid from system.connect\");\n                return null;\n            }\n        }\n        else {\n            return null;\n        }\n    }\n\n\n\n    /\\*\n     \\* Does all the work for JSON POST requests.\n     \\*\n     \\* @param URI The URI for the post\n     \\* @param params The variables to be converted to JSON and POSTed with this request.\n     \\*/\n    protected static JSONObject prepareAndSendHttpPost(String URI, Map params) {\n        JSONObject json = null;\n        try {\n            json = new JSONObject();\n            if (params != null) {\n                Iterator> it = params.entrySet().iterator();\n                while (it.hasNext()) {\n                    Map.Entry pair = (Map.Entry)it.next();\n                    json.put(pair.getKey().toString(), pair.getValue());\n                }\n            }\n        }\n        catch (JSONException e) {\n            Log.e(TAG, \"unable to encode JSON for http request\");\n        }\n\n        StringEntity se = null;\n        try {\n            se = new StringEntity(json.toString());\n            se.setContentEncoding(new BasicHeader(HTTP.CONTENT\\_TYPE, \"application/json\"));\n        }\n        catch (Exception e) {\n            Log.d(TAG, \"unable to create string entity\");\n        }\n\n        final HttpPost post = new HttpPost(URI);\n        post.setEntity(se);\n\n        post.setHeader(\"Accept\", \"application/json\");\n        post.setHeader(\"Content-type\", \"application/json\");\n\n        maybeCreateHttpClient();\n\n        HttpResponse resp = null;\n        try {\n\n            resp = mHttpClient.execute(post);\n\n            if (resp.getStatusLine().getStatusCode() == HttpStatus.SC\\_OK) {\n                if (Log.isLoggable(TAG, Log.VERBOSE)) {\n                    Log.v(TAG, \"Successful POST\");\n                }\n                return decodeJSONResponse(resp);\n            } else {\n                if (Log.isLoggable(TAG, Log.VERBOSE)) {\n                    Log.v(TAG, \"Error POSTing: \" + resp.getStatusLine());\n                }\n                return null;\n            }\n        } catch (final IOException e) {\n            if (Log.isLoggable(TAG, Log.VERBOSE)) {\n                Log.v(TAG, \"IOException when POSTING\", e);\n            }\n            return null;\n        } finally {\n            if (Log.isLoggable(TAG, Log.VERBOSE)) {\n                Log.v(TAG, \"POST completing\");\n            }\n        }\n    }\n\n\n    /\\*\n     \\* Process the raw HttpResponse into a JSON object.\n     \\*/\n    protected static JSONObject decodeJSONResponse(HttpResponse resp) {\n\n        InputStream is = null;\n        try {\n            is = resp.getEntity().getContent();\n        }\n        catch (IOException e) {\n            Log.d(TAG, \"unable to get content from response entity\");\n            e.printStackTrace();\n            return null;\n        }\n\n        String in = convertStreamToString(is);\n\n        JSONObject json = null;\n        try {\n            json = new JSONObject(in);\n        }\n        catch (JSONException e) {\n            Log.d(TAG, \"could not decode JSON response from: \"+in);\n        }\n\n        return json;\n    }\n\n\n    /\\*\n     \\* Server responses are in stream format. This delivers the data as a String for easy parsing.\n     \\*/\n    protected static String convertStreamToString(InputStream is) {\n\n        BufferedReader reader = new BufferedReader(new InputStreamReader(is));\n        StringBuilder sb = new StringBuilder();\n\n        String line = null;\n        try {\n            while ((line = reader.readLine()) != null) {\n                sb.append(line + \"\\\\n\");\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        } finally {\n            try {\n                is.close();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n        return sb.toString();\n    }\n}\n</code></pre>","frontmatter":{"path":"/connect_android_to_drupal_s_json_server_module","title":"Connect Android to Drupalâ€™s JSON Server Module","date":"2011-05-03","tags":["android","programming"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"prev":{"html":"<p>My first departure was a learning experience but is over. The cost of good motors and the gecko controller call for a machine with commensurate capabilities to be worthwhile. Fine Line Automation offers a popular kit called FLA-100 and posts free plans for the machine on their website. I decided to save for the entire kit and electronics. Then ABC Electronics got in a good load of 80/20 and my willpower gave out. A little at a time, my FLA-100 clone begins. <a href=\"/dsc04081-e6c02ecaa8b4aae662bf0bc1c12efa62.jpg\"><img src=\"/dsc04081-e6c02ecaa8b4aae662bf0bc1c12efa62.jpg\" alt=\"dsc04081\" title=\"dsc04081\"></a></p>\n<p>This is a cheap sacrificial multipurpose blade. Very slow and steadied feeds gave an acceptable finish even without lube. I sprayed WD40 continuously to trim the more important lengths and got a nicer finish than I expected with the Craftsman.</p>\n<p><a href=\"/dsc04080-a03fa14b58a6ae745962dca3e825e138.jpg\"><img src=\"/dsc04080-a03fa14b58a6ae745962dca3e825e138.jpg\" alt=\"dsc04080\" title=\"dsc04080\"></a></p>\n<p>There is a considerable amount of tapping involved.</p>\n<p><a href=\"/dsc04082-5312ea48fa7d0463a1df5510ed3a66e8.jpg\"><img src=\"/dsc04082-5312ea48fa7d0463a1df5510ed3a66e8.jpg\" alt=\"dsc04082\" title=\"dsc04082\"></a></p>\n<p>Here are the parts for the base and leftover bits. I realized after buying that this 80/20 is metric 40mm-based instead of 1-1/2\" per the plan. I ordered 2-1/2\" 1018 rails from DiscountSteel.com to drill myself so that the overhang is 1/2\" for the carriages from CNCRouterParts.com. Luckily, everything else works out if I switch to 1-1/2\"-based 80/20 from the carriages on.</p>","id":"56b3dcc5-939c-5a2e-9b12-4296231aa943","frontmatter":{"path":"/cnc_part_4","title":"CNC Part 4","date":"2011-05-18","tags":["CNC"],"hexagonImages":["dsc04081.jpeg_hexagon.jpeg","dsc04081.jpg_hexagon.jpeg","dsc04080.jpg_hexagon.jpeg","dsc04082.jpg_hexagon.jpeg"]}},"next":{"html":"<p>I finally got around to building a log sled - one of the main reasons for having a bandsaw.</p>\n<p><a href=\"/dsc040711-5f5e0b0a6d75ebb2f852e03234d81207.jpg\"><img src=\"/dsc040711-5f5e0b0a6d75ebb2f852e03234d81207.jpg\" alt=\"Log sled allows me to firmly hold the log in position and slide straight along the mitre gauge slot.\" title=\"dsc040711\"></a></p>\n<p>The body of the sled is 3/4\" plywood with a few t-tracks routed in to allow the fence and clamps to be easily adjusted. I ground the holder bolts to a point and they hold large logs steady after a few turns into the green wood. A strip of oak glued onto the bottom rides easily in the mitre gauge slot on the bandsaw table.</p>\n<p><a href=\"/dsc040721-6fea61e709319d275187ac90120bc042.jpg\"><img src=\"/dsc040721-6fea61e709319d275187ac90120bc042.jpg\" alt=\"Lauren&#x27;s parents kindly let us take what we wanted from a felled birch.\" title=\"dsc040721\"></a></p>\n<p><a href=\"/dsc04075-b1e4640f2b5ac528da1073eb8010b472.jpg\"><img src=\"/dsc04075-b1e4640f2b5ac528da1073eb8010b472.jpg\" alt=\"Log sled in action\" title=\"dsc04075\"></a></p>\n<p><a href=\"/dsc040731-53736eccff03b9ea72e0f3f16d50a4d3.jpg\"><img src=\"/dsc040731-53736eccff03b9ea72e0f3f16d50a4d3.jpg\" alt=\"Once two straight edges are established, the rest of the milling is done against the bandsaw fence.\" title=\"dsc040731\"></a></p>\n<p><a href=\"/dsc04076-f1510656c803630b5d434600e70619fb.jpg\"><img src=\"/dsc04076-f1510656c803630b5d434600e70619fb.jpg\" alt=\"This lumber will be ready in about a year.\" title=\"dsc04076\"></a></p>\n<p><a href=\"/dsc04077-1b614bd33c2117090d04d1024f44e8f4.jpg\"><img src=\"/dsc04077-1b614bd33c2117090d04d1024f44e8f4.jpg\" alt=\"I think the lighter planks are from a piece of poplar.\" title=\"dsc04077\"></a></p>","id":"494dc3e7-dcef-5bb4-8ac5-d7db154b3faf","frontmatter":{"path":"/real_home_grown_lumber","title":"Real Home Grown Lumber","date":"2011-05-01","tags":["wood"],"hexagonImages":["dsc040711.jpeg_hexagon.jpeg","dsc040711-300x225.jpg_hexagon.jpeg","dsc040721-300x225.jpg_hexagon.jpeg","dsc04075-225x300.jpg_hexagon.jpeg","dsc040731-240x300.jpg_hexagon.jpeg","dsc04076-300x225.jpg_hexagon.jpeg","dsc04077-300x225.jpg_hexagon.jpeg","dsc040711.jpg_hexagon.jpeg","dsc040721.jpg_hexagon.jpeg","dsc04075.jpg_hexagon.jpeg","dsc040731.jpg_hexagon.jpeg","dsc04076.jpg_hexagon.jpeg","dsc04077.jpg_hexagon.jpeg"]}}}}}