{"componentChunkName":"component---src-templates-post-js","path":"/12_bit_color_from_arduino_to_nokia_6100_knock_off_lcd","webpackCompilationHash":"dd038a4f7a1fe80624a3","result":{"data":{"markdownRemark":{"html":"<p>This code draws a Mandelbrot pattern on the 132x132 Nokia 6100 type screen with Epson controller (will not work for the Phillips) from an <a href=\"http://arduino.cc\">Arduino</a>. I started with the code example from <a href=\"http://www.arduino.cc/cgi-bin/yabb2/YaBB.pl?num=1237036119/45\">this post</a> and made some optimizations- especially to the serial communication code. Then I ported the Mandelbrot algorithm from <a href=\"http://www.codeproject.com/KB/cpp/mandelbrot_obfuscation.aspx\">here</a>. The zoom level and viewport into the fractal can easily be changed or made to update each loop. But it's slow.</p>\n<p><img src=\"/pinecar-092441550d5e5ed09d30dd2ded2d2d21.jpg\" alt=\"World&#x27;s first 8Mhz pinewood derby car with 12-bit color?\"></p>\n<p><a href=\"/mandelbrot_zoomer-de659a35c90c05a3c09263f5e6713dcb.pde\">source</a></p>\n<p>To send serial data a bit faster, one might reserve an entire Arduino port and rotate/clock, rotate/clock and so on, instead of repeatedly testing the data byte and flipping a single pin. I still haven't been able to engage the 8-bit color mode, which would again speed things up since I could send one byte per pixel instead of three bytes for two pixels. I used an 8Mhz and would only use 16Mhz or higher setup if I did this again. When will there be a 2Ghz Arduino? Then it might look more like this:</p>\n<p>(needs flash)</p>\n<p><object type=\"application/x-shockwave-flash\"\n  data=\"/mandelbrotset.swf\"\n  width=\"132\" height=\"132\"></p>\n  <param name=\"movie\" value=\"/mandelbrotset.swf\" />\n  <param name=\"quality\" value=\"high\"/>\n</object>\n<p>(mouse left/right for pan, up/down for zoom)</p>","frontmatter":{"path":"/12_bit_color_from_arduino_to_nokia_6100_knock_off_lcd","title":"12-bit Color from Arduino to Nokia 6100 Knock-off LCD","date":"2009-09-21","tags":["arduino","artwork","electronics","fractal"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"prev":{"html":"<p>Lauren gave me a classic 10\" radial arm saw for my birthday after we moved (and have a garage). I've been testing its ability to cut accurately. Ripping this walnut and maple to one inch felt reasonably dangerous and I'll probably build the jig suggested in the original manual for ripping small stock.</p>\n<p><img src=\"/glueing_as-956d7a2ed8f417baeb9b5d5aed5a0f2c.jpg\" alt=\"glueing_as\"></p>\n<p>This row encodes the <a href=\"http://en.wikipedia.org/wiki/Ascii\">ASCII</a> character \"e\". \"a\" is sitting on the table.</p>\n<p><img src=\"/glueing_squares-f4e0b4ec0315e9363bfad8876704d76f.jpg\" alt=\"glueing_squares\"></p>\n<p>I decided the next cutting boards will be end-grain, so the rest of the letters for this one should be glued from single squares. This produces a less-accurate row but got the job done.</p>\n<p><img src=\"/rough_rows-996a85081b20323b174f07fb50653315.jpg\" alt=\"rough_rows\"></p>\n<p>Here are the rows of the word I planned to spell.</p>\n<p><img src=\"/final_glueing-00ce1a730c8f27efe96179d674edbb1f.jpg\" alt=\"final_glueing\"></p>\n<p>I let the last glue setup cure for 72 hours.</p>\n<p><img src=\"/oiled-2dfa3d1c56e3cc440ef83d9ef82531f3.jpg\" alt=\"oiled\"></p>\n<p>Sanded flat, edged on the router table, wetted to raise the grain and sanded to a smooth finish. Then, mineral oil. Extra points if you can tell me what word is encoded.</p>","id":"5a486f72-24b4-592f-ad58-18d3a613863f","frontmatter":{"path":"/ascii_cutting_board","title":"ASCII Cutting Board","date":"2009-10-26","tags":["artwork","ascii","cna","house","tiles","wood"],"hexagonImages":["glueing_as.jpg_hexagon.jpeg","glueing_squares.jpg_hexagon.jpeg","rough_rows.jpg_hexagon.jpeg","final_glueing.jpg_hexagon.jpeg","oiled.jpg_hexagon.jpeg"]}},"next":{"html":"<p><img src=\"/mandelbrot-955252adbb3ce0cf6cc624db98c553a0.png\" alt=\"mandelbrot.png\"></p>\n<p>Back in the days of i386 processors, long distance dialup connections and 5.25\" floppy drives, I spent a lot of time with a program called <a href=\"http://spanky.triumf.ca/www/fractint/fractint.html\">FractInt</a>. You could pick an algorithm, set up the location, zoom level and color palette and then wait minutes, hours or days for it to calculate a TOTALLY AWESOME image.</p>\n<p>Now that processors are screaming fast and AS3 is about catching up to the speed of real programming languages, I decided to port the Mandelbrot algorithm and see how fast it could be rendered. This 132x132 image is being calculated each frame with up to 200 iterations per pixel.</p>\n<object type=\"application/x-shockwave-flash\"  width=\"132\" height=\"132\">\n  <param name=\"movie\" value=\"/mandelbrotset-d68eb3a398a5884a5e1e0361f2e29d99.swf\" />\n</object>\n<p>Z = zoom in\nX = zoom out\nmouse = pan</p>\n<p><a href=\"/mandelbrotset-1373a04b16db5cad69358daf7374eb87.as\">source</a></p>","id":"a9a7c72e-04d9-552c-a319-497420388885","frontmatter":{"path":"/mandelbrot_2009","title":"Mandelbrot 2009","date":"2009-09-21","tags":["programming"],"hexagonImages":["Screen%20shot%202011-07-21%20at%205.22.43%20PM.png_hexagon.png"]}}}}}