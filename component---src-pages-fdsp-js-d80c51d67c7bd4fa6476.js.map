{"version":3,"sources":["webpack:///./src/pages/ForceDirectedSnappedPosts/PlayPauseButton.js","webpack:///./src/pages/ForceDirectedSnappedPosts/index.js","webpack:///./src/pages/fdsp.js","webpack:///./src/lib/ForceDirectedGraph/Point2D.ts","webpack:///./src/lib/ForceDirectedGraph/ForceDirectedGraph.ts","webpack:///./src/hexagons/clients/blog.js","webpack:///./src/lib/ForceDirectedGraph/distance.ts","webpack:///./src/lib/hexGrid.ts","webpack:///./src/lib/forceFunction.ts","webpack:///./src/lib/getInitialPlacement.ts","webpack:///./src/lib/getSimilarityRelationship.ts","webpack:///./node_modules/core-js/modules/es7.object.values.js","webpack:///./node_modules/core-js/modules/_object-to-array.js"],"names":["__webpack_require__","r","__webpack_exports__","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","PlayPauseButton","_ref","onToggle","_useState","useState","ongoing","setOngoing","a","createElement","onClick","THETA_POSITIONS","PHI_POSITIONS","PALETTE","TWO_PI","Math","PI","ForceDirectedSnappedPosts","areaSize","Point2D","onToggleOngoing","bool","_this","step","groupsOngoing","randomize","fdg","initializePositions","items","draw","findGroupRepresentatives","representatives","forEach","item","tags","map","tag","toLowerCase","sort","join","Object","values","setupGroupsItems","tagGroupFdg","ForceDirectedGraph","forceOnItemFromSourceItem","forceFunction","getInitialPlacement","getItemsRelationship","getSimilarityRelationship","prepareRelationshipMatrix","drawGroups","stepGroups","setup","BUMP_VALUE","bump","setTimeout","tagGroupCtx","clearRect","placedItems","pos","position","x","y","scale","length","i","beginPath","moveTo","arc","fillStyle","charCodeAt","fill","ctx","snapItems","assignItemsToNearestAddress","hexagonCoordMatrix","componentDidMount","_this2","this","buildPositionMatrix","rowArray","row","coords","col","backgroundCtx","fillRect","theta","phi","blogClient","Post","list","then","response","data","render","_this3","react__WEBPACK_IMPORTED_MODULE_7___default","Fragment","style","height","width","ref","getContext","_PlayPauseButton__WEBPACK_IMPORTED_MODULE_12__","Component","_ForceDirectedSnappedPosts__WEBPACK_IMPORTED_MODULE_1__","Demo","add","point","factor","ACCELERATION_FACTOR","relationshipMatrix","targetItem","sourceItem","relationship","Error","totalForceOnItem","itemIndex","aggregateForce","placedItem","placedItemIndex","id","force","random","assign","moveItem","distance","count","N","Array","j","amount","mappersmith__WEBPACK_IMPORTED_MODULE_0__","mappersmith__WEBPACK_IMPORTED_MODULE_0___default","mappersmith_middleware_encode_json__WEBPACK_IMPORTED_MODULE_1__","mappersmith_middleware_encode_json__WEBPACK_IMPORTED_MODULE_1___default","forge","clientId","host","middleware","EncodeJson","resources","path","d","distance2D","distance1D","x1","x2","EXTENT","basicDistance","mirrorDistance","p1","p2","dX","dY","magnitude","sqrt","direction","_THETA_DIVISIONS","THETA_INTERVAL","PHI_INTERVAL","layer","positionMatrix","thetaOffset","addressCoordMatrix","placements","empties","buildEmptyPlacements","minDistance","Number","MAX_SAFE_INTEGER","closestHexagon","closestAddress","_ForceDirectedGraph_Point2D__WEBPACK_IMPORTED_MODULE_0__","_ForceDirectedGraph_distance__WEBPACK_IMPORTED_MODULE_1__","_distance2D","scalarDistance","similarity","closeForce","strength","similarForce","dissimilarForce","radius","lastPostId","postId","tagString","codeSum","cos","sin","ramda__WEBPACK_IMPORTED_MODULE_0__","ramda__WEBPACK_IMPORTED_MODULE_1__","sameTags","intersection","toUpper","log","$export","$values","S","it","DESCRIPTORS","getKeys","toIObject","isEnum","f","module","exports","isEntries","key","O","keys","result","call","push"],"mappings":"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","file":"component---src-pages-fdsp-js-d80c51d67c7bd4fa6476.js","sourcesContent":["import React, { useState } from \"react\"\n\nconst PlayPauseButton = ({ onToggle }) => {\n  const [ongoing, setOngoing] = useState(false)\n\n  return (\n    <button\n      onClick={() => {\n        onToggle(!ongoing)\n        setOngoing(!ongoing)\n      }}\n    >\n      {ongoing ? \"stop\" : \"go\"}\n    </button>\n  )\n}\n\nexport default PlayPauseButton\n","import React, { Component } from \"react\"\nimport blogClient from \"../../hexagons/clients/blog\"\nimport {\n  buildPositionMatrix,\n  assignItemsToNearestAddress,\n} from \"../../lib/hexGrid\"\nimport ForceDirectedGraph from \"../../lib/ForceDirectedGraph/ForceDirectedGraph\"\nimport Point2D from \"../../lib/ForceDirectedGraph/Point2D\"\nimport PlayPauseButton from \"./PlayPauseButton\"\nimport forceFunction from \"../../lib/forceFunction\"\nimport getInitialPlacement from \"../../lib/getInitialPlacement\"\nimport getSimilarityRelationship from \"../../lib/getSimilarityRelationship\"\n\nconst THETA_POSITIONS = 40\nconst PHI_POSITIONS = 30\n\nconst PALETTE = [\n  \"#a00\",\n  \"#0a0\",\n  \"#00a\",\n  \"#990\",\n  \"#da0\",\n  \"#099\",\n  \"#909\",\n  \"#555\",\n  \"#f3f\",\n]\nconst TWO_PI = 2 * Math.PI\n\nclass ForceDirectedSnappedPosts extends Component {\n  areaSize = new Point2D(TWO_PI, TWO_PI)\n  ongoing = false\n  onToggleOngoing = bool => {\n    this.ongoing = bool\n    if (this.ongoing) {\n      this.step()\n    }\n  }\n  groupsOngoing = true\n\n  componentDidMount() {\n    this.hexagonCoordMatrix = buildPositionMatrix(\n      THETA_POSITIONS,\n      PHI_POSITIONS\n    )\n    const scale = 500 / TWO_PI\n    this.hexagonCoordMatrix.forEach((rowArray, row) => {\n      rowArray.forEach((coords, col) => {\n        this.backgroundCtx.fillRect(\n          scale * coords.theta,\n          scale * coords.phi,\n          1,\n          1\n        )\n      })\n    })\n\n    blogClient.Post.list().then(response => {\n      const items = response.data().items\n      this.setup(items)\n    })\n  }\n\n  randomize = () => {\n    this.fdg.initializePositions(this.items)\n    this.draw()\n  }\n\n  findGroupRepresentatives = items => {\n    const representatives = {}\n\n    items.forEach(item => {\n      const tags = item.tags.map(tag => tag.toLowerCase()).sort()\n      if (!representatives[tags.join(\",\")]) {\n        representatives[tags.join(\",\")] = item\n      }\n    })\n\n    return Object.values(representatives)\n  }\n\n  setupGroupsItems = () => {\n    this.representatives = this.findGroupRepresentatives(this.items)\n    this.tagGroupFdg = new ForceDirectedGraph(this.areaSize, 0.00001)\n    this.tagGroupFdg.forceOnItemFromSourceItem = forceFunction\n    this.tagGroupFdg.getInitialPlacement = getInitialPlacement\n    this.tagGroupFdg.initializePositions(this.representatives)\n    this.tagGroupFdg.getItemsRelationship = this.getSimilarityRelationship\n    this.tagGroupFdg.prepareRelationshipMatrix()\n\n    this.drawGroups()\n    this.stepGroups()\n  }\n\n  setup = items => {\n    this.items = items\n    this.setupGroupsItems(items)\n\n    this.fdg = new ForceDirectedGraph(this.areaSize, 0.00001)\n    this.fdg.getItemsRelationship = getSimilarityRelationship\n    this.fdg.getInitialPlacement = getInitialPlacement\n    //    this.randomize()\n\n    this.fdg.forceOnItemFromSourceItem = forceFunction\n    //    this.fdg.prepareRelationshipMatrix()\n\n    //    this.draw()\n  }\n\n  BUMP_VALUE = 0.6\n\n  bump = () => {\n    this.fdg.bump(this.BUMP_VALUE)\n    this.draw()\n  }\n\n  step = () => {\n    this.fdg.step()\n\n    this.draw()\n\n    if (this.ongoing) {\n      setTimeout(this.step, 1)\n    }\n  }\n\n  stepGroups = () => {\n    this.tagGroupFdg.step()\n\n    this.drawGroups()\n\n    if (this.groupsOngoing) {\n      setTimeout(this.stepGroups, 1)\n    }\n  }\n\n  drawGroups = () => {\n    this.tagGroupCtx.clearRect(0, 0, 500, 500)\n\n    this.tagGroupFdg.placedItems.forEach(item => {\n      const pos = new Point2D(item.position.x, item.position.y)\n      const scale = 500 / TWO_PI\n      pos.scale(scale)\n\n      let step = TWO_PI / item.tags.length\n\n      item.tags.forEach((tag, i) => {\n        this.tagGroupCtx.beginPath()\n        this.tagGroupCtx.moveTo(pos.x, pos.y)\n        this.tagGroupCtx.arc(pos.x, pos.y, 3, i * step, (i + 1) * step)\n        this.tagGroupCtx.fillStyle = PALETTE[tag.charCodeAt(0) % PALETTE.length]\n        this.tagGroupCtx.fill()\n      })\n    })\n  }\n\n  draw = () => {\n    this.ctx.clearRect(0, 0, 500, 500)\n\n    this.fdg.placedItems.forEach(item => {\n      const pos = new Point2D(item.position.x, item.position.y)\n      const scale = 500 / TWO_PI\n      pos.scale(scale)\n\n      let step = TWO_PI / item.tags.length\n\n      item.tags.forEach((tag, i) => {\n        this.ctx.beginPath()\n        this.ctx.moveTo(pos.x, pos.y)\n        this.ctx.arc(pos.x, pos.y, 3, i * step, (i + 1) * step)\n        this.ctx.fillStyle = PALETTE[tag.charCodeAt(0) % PALETTE.length]\n        this.ctx.fill()\n      })\n    })\n  }\n\n  snapItems = () => {\n    assignItemsToNearestAddress(\n      this.fdg.placedItems,\n      this.areaSize,\n      this.hexagonCoordMatrix,\n      THETA_POSITIONS,\n      PHI_POSITIONS\n    )\n\n    this.draw()\n  }\n\n  render() {\n    return (\n      <>\n        <div style={{ height: 500 }}>\n          <canvas\n            style={{ position: \"absolute\" }}\n            width=\"500\"\n            height=\"500\"\n            ref={ref => (this.backgroundCtx = ref.getContext(\"2d\"))}\n          />\n          <canvas\n            style={{ position: \"absolute\" }}\n            width=\"500\"\n            height=\"500\"\n            ref={ref => (this.ctx = ref.getContext(\"2d\"))}\n          />\n          <canvas\n            style={{ position: \"absolute\" }}\n            width=\"500\"\n            height=\"500\"\n            ref={ref => (this.tagGroupCtx = ref.getContext(\"2d\"))}\n          />\n        </div>\n        <button onClick={this.randomize}>randomize</button>\n        &nbsp;\n        <button onClick={this.bump}>bump</button>\n        &nbsp;\n        <PlayPauseButton onToggle={this.onToggleOngoing} />\n        &nbsp;\n        <button onClick={this.snapItems}>assign</button>\n      </>\n    )\n  }\n}\n\nexport default ForceDirectedSnappedPosts\n","import React from \"react\"\nimport ForceDirectedSnappedPosts from \"./ForceDirectedSnappedPosts\"\n\nconst Demo = () => (\n  <div>\n    <ForceDirectedSnappedPosts />\n  </div>\n)\n\nexport default Demo\n","class Point2D {\n  public x: number\n  public y: number\n\n  constructor(x: number, y: number) {\n    this.x = x\n    this.y = y\n  }\n\n  public add(point: Point2D): Point2D {\n    this.x += point.x\n    this.y += point.y\n\n    return this\n  }\n\n  public scale(factor: number): Point2D {\n    this.x *= factor\n    this.y *= factor\n\n    return this\n  }\n}\n\nexport default Point2D\n","import { Item } from \"./types.d\"\nimport Point2D from \"./Point2D\"\n\nclass ForceDirectedGraph {\n  public areaSize: Point2D = null\n  public placedItems: Item[] = null\n  private ACCELERATION_FACTOR = null\n  private relationshipMatrix = [[]]\n\n  constructor(areaSize: Point2D, ACCELERATION_FACTOR: number = 0.0004) {\n    this.areaSize = areaSize\n    this.ACCELERATION_FACTOR = ACCELERATION_FACTOR\n  }\n\n  public forceOnItemFromSourceItem = (\n    targetItem: Item,\n    sourceItem: Item,\n    areaSize: Point2D,\n    relationship: object\n  ): Point2D => {\n    throw new Error(`forceOnItemFromSourceItem() not defined as (\n      targetItem: Item,\n      sourceItem: Item,\n      areaSize: Point2D,\n      relationship: object\n    ): Point2D`)\n  }\n\n  totalForceOnItem = (itemIndex: number): Point2D => {\n    const item = this.placedItems[itemIndex]\n    let aggregateForce = new Point2D(0, 0)\n\n    this.placedItems.forEach((placedItem, placedItemIndex) => {\n      if (placedItem.id === item.id) return\n\n      const force = this.forceOnItemFromSourceItem(\n        item,\n        placedItem,\n        this.areaSize,\n        this.relationshipMatrix[placedItemIndex][itemIndex]\n      )\n\n      aggregateForce.add(force)\n    })\n\n    return aggregateForce\n  }\n\n  public getInitialPlacement = (item: Item): Point2D =>\n    new Point2D(\n      this.areaSize.x * Math.random(),\n      this.areaSize.y * Math.random()\n    )\n\n  public initializePositions = (items: Item[]): void => {\n    this.placedItems = items.map((item: Item) => {\n      return {\n        ...item,\n        position: this.getInitialPlacement(item),\n      }\n    })\n  }\n\n  private moveItem = (item: Item, distance: Point2D): void => {\n    item.position.add(distance)\n    if (item.position.x < 0) {\n      item.position.x += this.areaSize.x\n    } else if (item.position.x > this.areaSize.x) {\n      item.position.x -= this.areaSize.x\n    }\n    if (item.position.y < 0) {\n      item.position.y += this.areaSize.y\n    } else if (item.position.y > this.areaSize.y) {\n      item.position.y -= this.areaSize.y\n    }\n  }\n\n  public step = (count: number = 1): void => {\n    for (let step = count; step > 0; step--) {\n      for (let i = this.placedItems.length - 1; i >= 0; i--) {\n        const force = this.totalForceOnItem(i)\n\n        this.moveItem(\n          this.placedItems[i],\n          force.scale(this.ACCELERATION_FACTOR)\n        )\n      }\n    }\n  }\n\n  public getItemsRelationship = (\n    sourceItem: Item,\n    targetItem: Item\n  ): object => {\n    throw \"getItemsRelationship must be defined as (sourceItem:Item, targetItem:Item):object\"\n  }\n\n  public prepareRelationshipMatrix = (): object[][] => {\n    const N = this.placedItems.length\n    const relationshipMatrix = Array(N)\n      .fill(0)\n      .map(() => Array(N).fill(0))\n\n    for (let i = 0; i < N; ++i) {\n      for (let j = 0; j < N; ++j) {\n        if (i == j) continue\n\n        const sourceItem = this.placedItems[i]\n        const targetItem = this.placedItems[j]\n\n        const relationship = this.getItemsRelationship(sourceItem, targetItem)\n\n        relationshipMatrix[i][j] = relationship\n        relationshipMatrix[j][i] = relationship\n      }\n    }\n\n    this.relationshipMatrix = relationshipMatrix\n    return relationshipMatrix\n  }\n\n  public bump = (amount: number): void => {\n    this.placedItems.forEach(item => {\n      item.position.x += amount * (Math.random() - 0.5)\n      item.position.y += amount * (Math.random() - 0.5)\n    })\n  }\n}\n\nexport default ForceDirectedGraph\n","import forge from \"mappersmith\"\nimport EncodeJson from \"mappersmith/middleware/encode-json\"\n\nexport default forge({\n  clientId: \"joes-blog\",\n  host: \"\",\n  middleware: [EncodeJson],\n  resources: {\n    Post: {\n      list: { path: \"/feed-1.json?z=\" + Math.random() }, // process.env.POSTS_ENDPOINT\n    },\n  },\n})\n","import { Distance2D } from \"./types.d\"\nimport Point2D from \"./Point2D\"\n\nexport const distance1D = (x1: number, x2: number, EXTENT: number): number => {\n  if (x1 == x2) {\n    return 0\n  }\n  const basicDistance = x2 - x1\n  if (x1 < x2) {\n    const mirrorDistance = x1 + EXTENT - x2\n\n    if (basicDistance < mirrorDistance) {\n      return basicDistance\n    }\n    return -mirrorDistance\n  } else {\n    const mirrorDistance = x2 + EXTENT - x1\n\n    if (-basicDistance < mirrorDistance) {\n      return basicDistance\n    }\n    return mirrorDistance\n  }\n}\n\nexport const distance2D = (\n  p1: Point2D,\n  p2: Point2D,\n  EXTENT: Point2D\n): Distance2D => {\n  const dX = distance1D(p1.x, p2.x, EXTENT.x)\n  const dY = distance1D(p1.y, p2.y, EXTENT.y)\n  const magnitude = Math.sqrt(dX * dX + dY * dY)\n\n  return {\n    magnitude,\n    direction: { x: dX / magnitude, y: dY / magnitude },\n  }\n}\n","import { distance2D } from \"./ForceDirectedGraph/distance\"\nimport { uniq } from \"ramda\"\nimport Point2D from \"./ForceDirectedGraph/Point2D\"\nimport { Address, Distance2D } from \"./ForceDirectedGraph/types.d\"\n\nconst NEIGHBORS = [\n  { row: 1, col: 0 },\n  { row: 2, col: 0 },\n  { row: 1, col: -1 },\n  { row: -1, col: -1 },\n  { row: -2, col: 0 },\n  { row: -1, col: 0 },\n]\n\nexport const getNeighbor = (\n  col: number,\n  row: number,\n  neighborIndex: number,\n  THETA_POSITIONS: number,\n  PHI_POSITIONS: number\n): Address => {\n  const neighbor = NEIGHBORS[neighborIndex]\n\n  const newRow = row + neighbor.row\n  const newCol = col + neighbor.col\n\n  return {\n    row: newRow < 0 ? newRow + PHI_POSITIONS : newRow % PHI_POSITIONS,\n    col: newCol < 0 ? newCol + THETA_POSITIONS : newCol % THETA_POSITIONS,\n  }\n}\n\nexport const buildPositionMatrix = (\n  THETA_POSITIONS: number,\n  PHI_POSITIONS: number\n): Point2D[][] => {\n  const _THETA_DIVISIONS = 3 * THETA_POSITIONS\n\n  const THETA_INTERVAL = (2 * Math.PI) / _THETA_DIVISIONS\n  const PHI_INTERVAL = (2 * Math.PI) / PHI_POSITIONS\n\n  let layer = 0\n  const positionMatrix = []\n\n  for (let row = 0; row < PHI_POSITIONS; row++) {\n    positionMatrix[row] = Array(THETA_POSITIONS)\n\n    const thetaOffset = layer % 2 === 1 ? 1.5 * THETA_INTERVAL : 0\n\n    for (let col = 0; col < THETA_POSITIONS; col++) {\n      positionMatrix[row][col] = new Point2D(\n        thetaOffset + 3 * col * THETA_INTERVAL,\n        row * PHI_INTERVAL\n      )\n    }\n\n    layer++\n  }\n\n  return positionMatrix\n}\n/*\nexport const buildDistanceMatrix = (\n  positionMatrix: object[][],\n  COL_COUNT,\n  ROW_COUNT,\n  extents = { x: 2 * Math.PI, y: 2 * Math.PI }\n): Distance2D[][][][] => {\n  const distances = Array(ROW_COUNT)\n\n  for (let i = 0; i < ROW_COUNT; i++) {\n    distances[i] = Array(COL_COUNT)\n    for (let j = 0; j < COL_COUNT; j++) {\n      distances[i][j] = Array(ROW_COUNT)\n      for (let k = 0; k < ROW_COUNT; k++) {\n        distances[i][j][k] = Array(COL_COUNT)\n        for (let l = 0; l < COL_COUNT; l++) {\n          distances[i][j][k][l] = distance2D(\n            positionMatrix[i][j],\n            positionMatrix[k][l],\n            extents\n          )\n        }\n      }\n    }\n  }\n\n  return distances\n}\n*/\n\nexport const buildEmptyPlacements = (\n  THETA_POSITIONS: number,\n  PHI_POSITIONS: number\n): object[][] => {\n  const empties = []\n\n  for (let i = 0; i < PHI_POSITIONS; i++) {\n    empties[i] = Array(THETA_POSITIONS)\n    for (let j = 0; j < THETA_POSITIONS; j++) {\n      empties[i][j] = null\n    }\n  }\n\n  return empties\n}\n\nconst getPrecomputedDistance = (\n  c1: Address,\n  c2: Address,\n  distanceMatrix: Distance2D[][][][]\n): Distance2D => distanceMatrix[c1.row][c1.col][c2.row][c2.col]\n\nexport const assignItemsToNearestAddress = (\n  items,\n  areaSize,\n  addressCoordMatrix,\n  THETA_POSITIONS,\n  PHI_POSITIONS\n) => {\n  const placements = buildEmptyPlacements(THETA_POSITIONS, PHI_POSITIONS)\n\n  items.forEach(item => {\n    const { position } = item\n\n    let minDistance = { magnitude: Number.MAX_SAFE_INTEGER }\n    let closestHexagon = null,\n      closestAddress = null\n\n    addressCoordMatrix.forEach((rowArray, row) => {\n      rowArray.forEach((coords, col) => {\n        if (!placements[row][col]) {\n          const distance = distance2D(position, coords, areaSize)\n\n          if (distance.magnitude < minDistance.magnitude) {\n            minDistance = distance\n            closestHexagon = coords\n            closestAddress = { row, col }\n          }\n        }\n      })\n    })\n\n    if (closestHexagon) {\n      item.position = new Point2D(closestHexagon.x, closestHexagon.y)\n      placements[closestAddress.row][closestAddress.col] = item\n    }\n  })\n}\n","import { Item, Relationship } from \"./ForceDirectedGraph/types.d\"\nimport Point2D from \"./ForceDirectedGraph/Point2D\"\nimport { distance2D } from \"./ForceDirectedGraph/distance\"\n\nexport default (\n  targetItem: Item,\n  sourceItem: Item,\n  areaSize: Point2D,\n  relationship: Relationship\n): Point2D => {\n  const { magnitude: scalarDistance, direction } = distance2D(\n    targetItem.position,\n    sourceItem.position,\n    areaSize\n  )\n  const { similarity } = relationship\n\n  const closeForce = -1.5 / (scalarDistance / 30)\n\n  const strength =\n    similarity > 0\n      ? similarForce(scalarDistance, closeForce, similarity)\n      : dissimilarForce(scalarDistance, closeForce, similarity)\n\n  return new Point2D(strength * direction.x, strength * direction.y)\n}\n\nconst dissimilarForce = (\n  scalarDistance: number,\n  closeForce: number,\n  similarity: number\n) =>\n  scalarDistance < 0.9\n    ? closeForce + (10 * similarity) / (100 * (scalarDistance + 1))\n    : 0\n\nconst similarForce = (\n  scalarDistance: number,\n  closeForce: number,\n  similarity: number\n) => closeForce + (800 * similarity) / (40 * (scalarDistance + 1))\n","import { Item } from \"./ForceDirectedGraph/types.d\"\nimport Point2D from \"./ForceDirectedGraph/Point2D\"\n\nexport default (item: Item): Point2D => {\n  let radius: number, theta: number, lastPostId: string\n\n  if (lastPostId != item.postId) {\n    lastPostId = item.postId\n\n    const tagString: string = item.tags.sort().join(\"\") || \"uncategorized\"\n\n    let codeSum: number = 0\n    for (let i = tagString.length - 1; i >= 0; i--) {\n      codeSum += tagString.charCodeAt(i)\n    }\n\n    theta = (codeSum % 628) / 100 + 0.05 * Math.random()\n\n    radius = 0.1 + 0.5 * Math.random()\n  }\n\n  radius += 0.01\n\n  return new Point2D(radius * Math.cos(theta), radius * Math.sin(theta))\n}\n","import { Item } from \"./ForceDirectedGraph/types.d\"\nimport { intersection, toUpper } from \"ramda\"\n\nexport default (sourceItem: Item, targetItem: Item): object => {\n  const sameTags = intersection(\n    sourceItem.tags.map(toUpper),\n    targetItem.tags.map(toUpper)\n  )\n\n  let similarity = sameTags.length >= 1 ? 5 + 5 * Math.log(sameTags.length) : -5\n\n  if (sourceItem.postId && sourceItem.postId === targetItem.postId) {\n    similarity += 20\n  }\n\n  return { similarity }\n}\n","// https://github.com/tc39/proposal-object-values-entries\nvar $export = require('./_export');\nvar $values = require('./_object-to-array')(false);\n\n$export($export.S, 'Object', {\n  values: function values(it) {\n    return $values(it);\n  }\n});\n","var DESCRIPTORS = require('./_descriptors');\nvar getKeys = require('./_object-keys');\nvar toIObject = require('./_to-iobject');\nvar isEnum = require('./_object-pie').f;\nmodule.exports = function (isEntries) {\n  return function (it) {\n    var O = toIObject(it);\n    var keys = getKeys(O);\n    var length = keys.length;\n    var i = 0;\n    var result = [];\n    var key;\n    while (length > i) {\n      key = keys[i++];\n      if (!DESCRIPTORS || isEnum.call(O, key)) {\n        result.push(isEntries ? [key, O[key]] : O[key]);\n      }\n    }\n    return result;\n  };\n};\n"],"sourceRoot":""}